---------------User Query---------------
// SleepLogList returns the sleep log list for based on given parameters
func (m *Session) SleepLogList(params LogListParameters) (SleepLogList, error) {
	parameterList := url.Values{}
	if params.BeforeDate != "" {
		parameterList.Add("beforeDate", params.BeforeDate)
		parameterList.Add("sort", "desc")
	} else if params.AfterDate != "" {
		parameterList.Add("afterDate", params.AfterDate)
		parameterList.Add("sort", "asc")
	} else {
		return SleepLogList{}, errors.New("beforeDate or afterDate must be given")
	}

	if params.Limit > 0 {
		if params.Limit > 20 {
			return SleepLogList{}, errors.New("limit must be 20 or less")
		}
		parameterList.Add("limit", strconv.Itoa(params.Limit))
	}

	parameterList.Add("offset", strconv.Itoa(params.Offset))

	contents, err := m.makeRequest("https://api.fitbit.com/1/user/-/sleep/list.json?" + parameterList.Encode())
	if err != nil {
		return SleepLogList{}, err
	}

	activityResponse := SleepLogList{}
	if err := json.Unmarshal(contents, &activityResponse); err != nil {
		return SleepLogList{}, err
	}

	return activityResponse, nil
}


---------------Response---------------
```go
// SleepLogList returns the sleep log list for based on given parameters
func (m *Session) SleepLogList(params LogListParameters) (SleepLogList, error) {
	parameterList := url.Values{}
	if params.BeforeDate != "" {
		parameterList.Add("beforeDate", params.BeforeDate)
		parameterList.Add("sort", "desc")
	} else if params.AfterDate != "" {
		parameterList.Add("afterDate", params.AfterDate)
		parameterList.Add("sort", "asc")
	} else {
		return SleepLogList{}, errors.New("beforeDate or afterDate must be given")
	}

	if params.Limit > 0 {
		if params.Limit > 100 {
			return SleepLogList{}, errors.New("limit must be 100 or less")
		}
		parameterList.Add("limit", strconv.Itoa(params.Limit))
	}

	// Removed the deprecated offset parameter usage
	contents, err := m.makeRequest("https://api.fitbit.com/1.2/user/-/sleep/list.json?" + parameterList.Encode())
	if err != nil {
		return SleepLogList{}, err
	}

	activityResponse := SleepLogList{}
	if err := json.Unmarshal(contents, &activityResponse); err != nil {
		return SleepLogList{}, err
	}

	return activityResponse, nil
}
```

---------------Similarity Score---------------
0.7688169633499999

---------------Relevant Context---------------

Context number 1 (score: 0.822531641): 
Get Sleep Log List This endpoint returns a list of a user's sleep log entries before or after a given date, and specifying offset, limit and sort order. The data returned for different dates can include sleep periods that began on the previous date. For example, a sleep log entry for 2018-10-21 may have ended that day but started the previous night on 2018-10-20. It uses units that correspond to the Accept-Language header provided. Scope: sleep Request GET /1.2/user/[user-id]/sleep/list.json URI Arguments user-id required The encoded ID of the user. Use "-" (dash) for current logged-in user. Query Parameters beforeDate optional/required The date in the format yyyy-MM-ddTHH:mm:ss. Only yyyy-MM-dd is required. Either beforeDate or afterDate must be specified. Set sort to desc when using beforeDate. string ($datetime) afterDate optional/required The date in the format yyyy-MM-ddTHH:mm:ss. Only yyyy-MM-dd is required. Either beforeDate or afterDate must be specified. Set sort to asc when using afterDate. string ($int) sort required Supported : asc | desc The sort oder of entries by date. Use asc to show the oldest sleep log first. Use desc to show the most frequent sleep log first. string limit required The number of sleep logs to be returned. Maximum: 100 string ($int) offset required Supported : 0 (zero) IMPORTANT : To paginate, request the next and previous links in the pagination response object. Do not manually specify the offset parameter, as it will be removed in the future and your app will break. string ($int) Request Headers authorization required Specify the token type and Fitbit user’s access token. Token type: Bearer accept optional Defines the media type of the response content the client is expecting. Supported: application/json accept-language optional The measurement unit system to use for response values. See Localization . accept-locale optional The locale to use for response values. See Localization .
Context number 2 (score: 0.78375262): 
Get Sleep Log by Date Range This endpoint returns a list of a user's sleep log entries for a date range. The data returned for either date can include a sleep period that ended that date but began on the previous date. For example, if you request a sleep log between 2021-12-22 and 2021-12-26, it may return log entries that span 2021-12-21 and 2021-12-22, as well as 2021-12-25 and 2021-12-26. It uses units that correspond to the Accept-Language header provided. Scope: sleep Request GET /1.2/user/[user-id]/sleep/date/[startDate]/[endDate].json URI Arguments user-id required The encoded ID of the user. Use "-" (dash) for current logged-in user. startDate required The date for the first sleep log to be returned in the format yyyy-MM-dd. endDate required The date for the last sleep log to be returned in the format yyyy-MM-dd. Maximum range: 100 days Request Headers authorization required Specify the token type and Fitbit user’s access token. Token type: Bearer accept optional Defines the media type of the response content the client is expecting. Supported: application/json accept-language optional The measurement unit system to use for response values. See Localization . accept-locale optional The locale to use for response values. See Localization . Examples URL CURL GET https ://api.fitbit.com/1.2/user/-/sleep/date/2020-01-01/2020-01-05.json GET https ://api.fitbit.com/1.2/user/GGNJL9/sleep/date/2020-01-01/2020-01-05.json curl -X GET "https ://api.fitbit.com/1.2/user/-/sleep/date/2020-01-01/2020-01-05.json" \ -H "accept: application/json" \ -H "authorization: Bearer <access_token>" Response Description Example Response Element Name Description sleep : dateOfSleep The date the sleep log ended. sleep : duration Length of the sleep in milliseconds. sleep : efficiency Calculated sleep efficiency score. This is not the sleep score available in the mobile application. sleep : endTime Time the sleep log ended. sleep : infoCode An integer value representing the quality of data collected within the sleep log.
Context number 3 (score: 0.7776): 
Sleep The Sleep endpoints are used for querying and modifying the user’s general sleep data. Developers can request the following API endpoints when integrating the Sleep data type: Create Sleep Goal creates or updates a user's sleep goal. Create Sleep Log creates a log entry for a sleep event. Delete Sleep Log deletes a user's sleep log. Get Sleep Goal retrieves a user's sleep goal. Get Sleep Log by Date retrieves a list of a user's sleep log entries for a given date. Get Sleep Log by Date Range retrieves a list of a user's sleep log entries for a given date range. Get Sleep Log List retrieves a list of a user's sleep log entries before or after a given date. Nutrition Time Series Blood Oxygen Saturation (SpO2)
Context number 4 (score: 0.776970446): 
Get Sleep Log by Date This endpoint returns a list of a user's sleep log entries for a given date. The data returned can include sleep periods that began on the previous date. For example, if you request a Sleep Log for 2021-12-22, it may return a log entry that began the previous night on 2021-12-21, but ended on 2021-12-22. It uses units that correspond to the Accept-Language header provided. Scope: sleep Request GET /1.2/user/[user-id]/sleep/date/[date].json URI Arguments user-id required The encoded ID of the user. Use "-" (dash) for current logged-in user. date required The date for the sleep log to be returned in the format yyyy-MM-dd. Request Headers authorization required Specify the token type and Fitbit user’s access token. Token type: Bearer accept optional Defines the media type of the response content the client is expecting. Supported: application/json accept-language optional The measurement unit system to use for response values. See Localization . accept-locale optional The locale to use for response values. See Localization . Examples URL CURL GET https ://api.fitbit.com/1.2/user/-/sleep/date/2020-01-01.json GET https ://api.fitbit.com/1.2/user/GGNJL9/sleep/date/2020-01-01.json curl -X GET "https ://api.fitbit.com/1.2/user/-/sleep/date/2020-01-01.json" \ -H "accept: application/json" \ -H "authorization: Bearer <access_token>" Response Description Example Response Element Name Description sleep : dateOfSleep The date the sleep log ended sleep : duration Length of the sleep in milliseconds. sleep : efficiency Calculated sleep efficiency score. This is not the sleep score available in the mobile application. sleep : endTime Time the sleep log ended. sleep : infoCode An integer value representing the quality of data collected within the sleep log. 0 = Sufficient data to generate a sleep log. 1 = Insufficient heart rate data. 2 = Sleep period was too short (less than 3 hours). 3 = Server-side issue. sleep : isMainSleep Boolean value: true or false sleep : levels : data : dateTime Timestamp the user started in sleep level.
Context number 5 (score: 0.774577558): 
Supported: application/json fitbit-rate-limit-limit The quota number of calls. fitbit-rate-limit-remaining The number of calls remaining before hitting the rate limit. fitbit-rate-limit-reset The number of seconds until the rate limit resets. Note: The rate limit headers are approximate and asynchronously updated. This means that there may be a minor delay in the decrementing of remaining requests. This could result in your application receiving an unexpected 429 response if you don't track the total number of requests you make yourself. Response Type HTTP Status Code HTTP response code. List of codes are found in the Troubleshooting Guide . Status Message Description of the status code. Response Body Contains the JSON response to the API call. When errors are returned by the API call, the errorType, fieldName and message text will provide more information to the cause of the failure. Response Codes 201 A successful request. 400 The request had bad syntax or was inherently impossible to be satisfied. 401 The request requires user authentication. Note: For a complete list of response codes, please refer to the Troubleshooting Guide . Additional Information It is NOT possible to create overlapping log entries. The dateOfSleep in the response for the sleep log is the date on which the sleep event ends. This endpoint supports two kinds of sleep data: stages : Levels data is returned with 30-second granularity. 'Sleep Stages' levels include deep, light, rem, and wake. classic : Levels data returned with 60-second granularity. 'Sleep Pattern' levels include asleep, restless, and awake. Note: shortData is only included for stages sleep logs and includes wake periods that are 3 minutes or less in duration. This distinction is to simplify graphically distinguishing short wakes from longer wakes, but they are physiologically equivalent. Manually Created Sleep Logs A manual sleep log is either a sleep log that has human input through the mobile or web application, or a 3rd party application records sleep using the Create Sleep Log endpoint. When a sleep log is manually recorded, a "classic" sleep log is generated. Sleep "stage" logs use the device heart rate and movement to calculate sleep stage data. When manually entering a sleep log, this information is typically not available. Create Sleep Goal Delete Sleep Log
Context number 6 (score: 0.771479607): 
Supported: application/json accept-language optional The measurement unit system to use for response values. See Localization . accept-locale optional The locale to use for response values. See Localization . Examples URL CURL GET https ://api.fitbit.com/1.2/user/-/sleep/list.json?afterDate=2020-05-01&sort=asc&offset=0&limit=1 GET https ://api.fitbit.com/1.2/user/GGNJL9/sleep/list.json?afterDate=2020-05-01&sort=asc&offset=0&limit=1 curl -X GET "https ://api.fitbit.com/1.2/user/-/sleep/list.json?2020-05-01&sort=asc&offset=0&limit=1" \ -H "accept: application/json" \ -H "authorization: Bearer <access_token>" Response Description Example Response Element Name Description pagination : [date] The specified beforeDate or afterDate. pagination : limit The specified limit. pagination : next pagination : offset The specified offset. pagination : previous pagination : sort The specified sort order. sleep : dateOfSleep The data the sleep log ended. sleep : duration Length of the sleep in milliseconds. sleep : efficiency Calculated sleep efficiency score. This is not the sleep score available in the mobile application. sleep : endTime Time the sleep log ended. sleep : infoCode An integer value representing the quality of data collected within the sleep log. 0 = Sufficient data to generate a sleep log. 1 = Insufficient heart rate data. 2 = Sleep period was too short (less than 3 hours). 3 = Server-side issue. sleep : isMainSleep Boolean value: true or false sleep : levels : data : dateTime Timestamp the user started in sleep level. sleep : levels : data : level The sleep level the user entered. The values returned for the sleep log type are: classic : restless | asleep | awake stages : deep | light | rem | wake sleep : levels : data : seconds The length of time the user was in the sleep level. Displayed in seconds. sleep : levels : shortData : dateTime Timestamp the user started in sleep level. Only supported when log type = stages. sleep : levels : shortData : level The sleep level the user entered. Only supported when log type = stages.
Context number 7 (score: 0.770120263): 
Delete Sleep Log Deletes a sleep log with the given log id. Scope: sleep Request DELETE /1.2/user/[user-id]/sleep/[log-id].json URI Arguments user-id required The encoded ID of the user. Use "-" (dash) for current logged-in user. log-id required ID of the sleep log to be deleted. Request Headers authorization required Specify the token type and Fitbit user’s access token. Token type: Bearer accept optional Defines the media type of the response content the client is expecting. Supported: application/json accept-language optional The measurement unit system to use for response values. See Localization . accept-locale optional The locale to use for response values. See Localization . Examples URL CURL DELETE https ://api.fitbit.com/1.2/user/-/sleep/3948582.json DELETE https ://api.fitbit.com/1.2/user/GGNJL9/sleep/3948582.json curl -X DELETE "https ://api.fitbit.com/1.2/user/-/sleep/25793948582.json" \ -H "accept: application/json" \ -H "authorization: Bearer <access_token>" Response A JSON response is not returned by this endpoint. Response Headers content-type The media type of the response content being sent to the client. Supported: application/json fitbit-rate-limit-limit The quota number of calls. fitbit-rate-limit-remaining The number of calls remaining before hitting the rate limit. fitbit-rate-limit-reset The number of seconds until the rate limit resets. Note: The rate limit headers are approximate and asynchronously updated. This means that there may be a minor delay in the decrementing of remaining requests. This could result in your application receiving an unexpected 429 response if you don't track the total number of requests you make yourself. Response Type HTTP Status Code HTTP response code. List of codes are found in the Troubleshooting Guide . Status Message Description of the status code. Response Body Contains the JSON response to the API call. When errors are returned by the API call, the errorType, fieldName and message text will provide more information to the cause of the failure. Response Codes 204 A successful request. 400 The request had bad syntax or was inherently impossible to be satisfied. 401 The request requires user authentication. Note: For a complete list of response codes, please refer to the Troubleshooting Guide . Create Sleep Log Get Sleep Goal
Context number 8 (score: 0.769263506): 
sleep : levels : data : level The sleep level the user entered. sleep : levels : data : seconds The length of time the user was in the sleep level. Displayed in seconds. sleep : levels : summary : [stage] : count Total number of times the user entered the sleep level. sleep : levels : summary : [stage] : minutes Total number of minutes the user appeared in the sleep level. sleep : logId Sleep log ID. sleep : minutesAfterWakeup The total number of minutes after the user woke up. sleep : minutesAsleep The total number of minutes the user was asleep. sleep : minutesAwake The total number of minutes the user was awake. sleep : minutesToFallAsleep The total number of minutes before the user fell asleep. sleep : startTime Time the sleep log begins. sleep : timeInBed Total number of minutes the user was in bed. sleep : type The type of sleep log. Supported : classic | stages { "sleep": { "dateOfSleep": "2020-02-09", "duration": 720000, "efficiency": 100, "endTime": "2020-02-09T22:12:00.000", "infoCode": 0, "isMainSleep": false, "levels": { "data": [ { "dateTime": "2020-02-09T22:00:00.000", "level": "asleep", "seconds": 720 } ], "summary": { "asleep": { "count": 0, "minutes": 12 }, "awake": { "count": 0, "minutes": 0 }, "restless": { "count": 0, "minutes": 0 } } }, "logId": 25793948582, "minutesAfterWakeup": 0, "minutesAsleep": 12, "minutesAwake": 0, "minutesToFallAsleep": 0, "startTime": "2020-02-09T22:00:00.000", "timeInBed": 12, "type": "classic" } } Response Headers content-type The media type of the response content being sent to the client. Supported: application/json fitbit-rate-limit-limit The quota number of calls. fitbit-rate-limit-remaining The number of calls remaining before hitting the rate limit.
Context number 9 (score: 0.769208133): 
Sleep "stage" logs use the device heart rate and movement to calculate sleep stage data. When manually entering a sleep log, this information is typically not available. It is NOT possible to create overlapping logs. "logType" values This field returns information on whether the user’s sleep data was automatically or manually detected. It includes the following 2 values: auto_detected : Sleep was automatically detected by our sleep detection service. manual : Sleep was logged by the user or edited by the user after being automatically detected. Meta response Some of the sleep log processing occurs asynchronously. On rare occassions, your application may be querying the sleep logs while the sleep data is still being processed. If the sleep logs are still in a processing state, a "meta" response will be returned. This response will indicate a retry duration given in milliseconds. The "meta" response may evolve with additional fields in the future; API clients should be prepared to ignore any new object properties they do not recognize. If the user has only 1 sleep log that is being processed, the response will contain only the meta field. { "meta": { "retryDuration": 3000, "state": "pending" } } However, if there is a second sleep log present for that day, then the sleep, summary and meta fields will be returned. { "meta": { "retryDuration": 3000, "state": "pending" } "sleep": [ {{ existing sleep details }} ], "summary": { "stages": { "deep": 104, "light": 205, "rem": 75, "wake": 78 }, "summary": { stages: { "deep": 55, "light": 176, "rem": 65, "wake": 21 } "totalMinutesAsleep": 296, "totalSleep Records": 2, "totalTimeInBed": 317 } } Get Sleep Log by Date Range
Context number 10 (score: 0.767847776): 
sleep : type The type of sleep log. Supported : classic | stages summary : stages : [level] summary : totalMinutesAsleep Total number of minutes the user was asleep across all sleep records in the sleep log. summary : totalSleepRecords The number of sleep records within the sleep log. summary : totalTimeInBed Total number of minutes the user was in bed across all records in the sleep log. { "sleep": [ { "dateOfSleep": "2020-02-21", "duration": 27720000, "efficiency": 96, "endTime": "2020-02-21T07:03:30.000", "infoCode": 0, "isMainSleep": true, "levels": { "data": [ { "dateTime": "2020-02-20T23:21:30.000", "level": "wake", "seconds": 630 }, { "dateTime": "2020-02-20T23:32:00.000", "level": "light", "seconds": 30 }, { "dateTime": "2020-02-20T23:32:30.000", "level": "deep", "seconds": 870 }, . . . { "dateTime": "2020-02-21T06:32:30.000", "level": "light", "seconds": 1860 } ], "shortData": [ { "dateTime": "2020-02-21T00:10:30.000", "level": "wake", "seconds": 30 }, { "dateTime": "2020-02-21T00:15:00.000", "level": "wake", "seconds": 30 }, . . .
Context number 11 (score: 0.76762712): 
Sleep "stage" logs use the device heart rate and movement to calculate sleep stage data. When manually entering a sleep log, this information is typically not available. It is NOT possible to create overlapping logs. "logType" values This field returns information on whether the user’s sleep data was automatically or manually detected. It includes the following 2 values: auto_detected : Sleep was automatically detected by our sleep detection service. manual : Sleep was logged by the user or edited by the user after being automatically detected. Meta response Some of the sleep log processing occurs asynchronously. On rare occassions, your application may be querying the sleep logs while the sleep data is still being processed. If the sleep logs are still in a processing state, a "meta" response will be returned. This response will indicate a retry duration given in milliseconds. The "meta" response may evolve with additional fields in the future; API clients should be prepared to ignore any new object properties they do not recognize. If the user has only 1 sleep log that is being processed, the response will contain only the meta field. { "meta": { "retryDuration": 3000, "state": "pending" } } However, if there is a second sleep log present for that day, then the sleep, summary and meta fields will be returned. { "meta": { "retryDuration": 3000, "state": "pending" } "sleep": [ {{ existing sleep details }} ], "summary": { "stages": { "deep": 104, "light": 205, "rem": 75, "wake": 78 }, "summary": { stages: { "deep": 55, "light": 176, "rem": 65, "wake": 21 } "totalMinutesAsleep": 296, "totalSleep Records": 2, "totalTimeInBed": 317 } } Get Sleep Log by Date Get Sleep Log List
Context number 12 (score: 0.765781403): 
Create Sleep Log Creates a log entry for a sleep event and returns a response in the format requested. Scope: sleep Request POST /1.2/user/[user-id]/sleep.json URI Arguments user-id required The encoded ID of the user. Use "-" (dash) for current logged-in user. Query Parameters date required Log entry date in the format yyyy-MM-dd. string ($date) duration required Duration in milliseconds. integer startTime required Start time; hours and minutes in the format HH:mm. string ($date) Request Headers authorization required Specify the token type and Fitbit user’s access token. Token type: Bearer accept optional Defines the media type of the response content the client is expecting. Supported: application/json accept-language optional The measurement unit system to use for response values. See Localization . accept-locale optional The locale to use for response values. See Localization . content-length required According to RFC 7230, section 3.3.2 , this HTTP request requires the Content-Length header field containing the anticipated size of the payload body. Examples URL CURL POST https ://api.fitbit.com/1.2/user/-/sleep.json?date=2020-02-09&startTime=22:00&duration=720000 POST https ://api.fitbit.com/1.2/user/GGNJL9/sleep.json?date=2020-02-09&startTime=22:00&duration=720000 curl -X POST "https ://api.fitbit.com/1.2/user/-/sleep.json?date=2020-02-09&startTime=22:00&duration=720000" \ -H "accept: application/json" \ -H "authorization: Bearer <access_token>" \ -H "content-length: <message_body_size>" Response Description Example Response Element Name Description sleep : dateOfSleep The data the sleep log ended. sleep : duration Length of the sleep in milliseconds. sleep : efficiency Calculated sleep efficiency score. This is not the sleep score available in the mobile application. sleep : endTime Time the sleep log ended. sleep : infoCode sleep : isMainSleep Boolean value: true or false sleep : levels : data : dateTime Timestamp the user started in sleep level. sleep : levels : data : level The sleep level the user entered. sleep : levels : data : seconds The length of time the user was in the sleep level.
Context number 13 (score: 0.764603317): 
Response Body Contains the JSON response to the API call. When errors are returned by the API call, the errorType, fieldName and message text will provide more information to the cause of the failure. Response Codes 200 A successful request. 400 The request had bad syntax or was inherently impossible to be satisfied. 401 The request requires user authentication. Note: For a complete list of response codes, please refer to the Troubleshooting Guide . Additional Information Types of sleep logs This endpoint supports two kinds of sleep log types: stages : Levels data is returned with 30-second granularity. 'Sleep Stages' levels include deep, light, rem, and wake. classic : Levels data returned with 60-second granularity. 'Sleep Pattern' levels include asleep, restless, and awake. Note: shortData is only included for stages sleep logs and includes wake periods that are 3 minutes or less in duration. This distinction is to simplify graphically distinguishing short wakes from longer wakes, but they are physiologically equivalent. For information on how to interpret the sleep data, see Interpreting the Sleep Stage and Short Data . Device generated sleep logs The dateOfSleep in the GET sleep log endpoint response is the date on which the sleep event ends. This means that requesting a sleep log for a given date, for example 2021-12-22, may return a log entry that began the previous night on 2021-12-21. This is to account for the fact that sleep periods typically take place overnight between two dates and the dateOfSleep refers to the date the user woke up. If the wake time during the main sleep is greater than 1 hour, the sleep log will be split into 2 logs. Although, if the device syncs during the wake time and consistent steps and hand movement occur for at least 15 minutes, then a sleep log might be generated for the first part of the sleep. The second part of the sleep will be detected when the device syncs in the morning. If the time between the 2 sleep logs is less than 1 hour, the 2 sleep logs will be stitched together. Manually created Sleep Logs A manual sleep log is either a sleep log that has human input through the mobile or web application, or a 3rd party application records sleep using the Create Sleep Log endpoint. When a sleep log is manually recorded, a "classic" sleep log is generated.
Context number 14 (score: 0.761452258): 
summary : totalSleepRecords The number of sleep records within the sleep log. summary : timeInBed Total number of minutes the user was in bed across all records in the sleep log. { "pagination": { "afterDate": "2020-05-01", "limit": 1, "next": "https ://api.fitbit.com/1.2/user/-/sleep/list.json?offset=1&limit=1&sort=asc&afterDate=2020-05-01", "offset": 0, "previous": "", "sort": "asc" }, "sleep": [ { "dateOfSleep": "2020-05-01", "duration": 20760000, "efficiency": 50, "endTime": "2020-05-01T06:20:00.000", "infoCode": 0, "isMainSleep": true, "levels": { "data": [ { "dateTime": "2020-05-01T00:33:30.000", "level": "wake", "seconds": 810 }, { "dateTime": "2020-05-01T00:47:00.000", "level": "light", "seconds": 30 }, { "dateTime": "2020-05-01T00:47:30.000", "level": "deep", "seconds": 270 }, . . . { "dateTime": "2020-05-01T06:04:00.000", "level": "deep", "seconds": 960 } ], "shortData": [ { "dateTime": "2020-05-01T01:05:00.000", "level": "wake", "seconds": 60 }, { "dateTime": "2020-05-01T01:41:00.000", "level": "wake", "seconds": 60 }, . . .
Context number 15 (score: 0.75931704): 
400 The request had bad syntax or was inherently impossible to be satisfied. 401 The request requires user authentication. Note: For a complete list of response codes, please refer to the Troubleshooting Guide . Additional Information Types of sleep logs This endpoint supports two kinds of sleep log types: stages : Levels data is returned with 30-second granularity. 'Sleep Stages' levels include deep, light, rem, and wake. classic : Levels data returned with 60-second granularity. 'Sleep Pattern' levels include asleep, restless, and awake. Note: shortData is only included for stages sleep logs and includes wake periods that are 3 minutes or less in duration. This distinction is to simplify graphically distinguishing short wakes from longer wakes, but they are physiologically equivalent. For information on how to interpret the sleep data, see Interpreting the Sleep Stage and Short Data . Device generated sleep logs The dateOfSleep in the GET sleep log endpoint response is the date on which the sleep event ends. This means that requesting a sleep log for a given date, for example 2021-12-22, may return a log entry that began the previous night on 2021-12-21. This is to account for the fact that sleep periods typically take place overnight between two dates and the dateOfSleep refers to the date the user woke up. If the wake time during the main sleep is greater than 1 hour, the sleep log will be split into 2 logs. Although, if the device syncs during the wake time and consistent steps and hand movement occur for at least 15 minutes, then a sleep log might be generated for the first part of the sleep. The second part of the sleep will be detected when the device syncs in the morning. If the time between the 2 sleep logs is less than 1 hour, the 2 sleep logs will be stitched together. Manually created Sleep Logs A manual sleep log is either a sleep log that has human input through the mobile or web application, or a 3rd party application records sleep using the Create Sleep Log endpoint. When a sleep log is manually recorded, a "classic" sleep log is generated. Sleep "stage" logs use the device heart rate and movement to calculate sleep stage data. When manually entering a sleep log, this information is typically not available. It is NOT possible to create overlapping logs.
Context number 16 (score: 0.759206176): 
When a sleep log is manually recorded, a "classic" sleep log is generated. Sleep "stage" logs use the device heart rate and movement to calculate sleep stage data. When manually entering a sleep log, this information is typically not available. It is NOT possible to create overlapping logs. "logType" values This field returns information on whether the user’s sleep data was automatically or manually detected. It includes the following 2 values: auto_detected : Sleep was automatically detected by our sleep detection service. manual : Sleep was logged by the user or edited by the user after being automatically detected. Meta response Some of the sleep log processing occurs asynchronously. On rare occassions, your application may be querying the sleep logs while the sleep data is still being processed. If the sleep logs are still in a processing state, a "meta" response will be returned. This response will indicate a retry duration given in milliseconds. The "meta" response may evolve with additional fields in the future; API clients should be prepared to ignore any new object properties they do not recognize. If the user has only 1 sleep log that is being processed, the response will contain only the meta field. { "meta": { "retryDuration": 3000, "state": "pending" } } However, if there is a second sleep log present for that day, then the sleep, summary and meta fields will be returned. { "meta": { "retryDuration": 3000, "state": "pending" } "sleep": [ {{ existing sleep details }} ], "summary": { "stages": { "deep": 104, "light": 205, "rem": 75, "wake": 78 }, "summary": { stages: { "deep": 55, "light": 176, "rem": 65, "wake": 21 } "totalMinutesAsleep": 296, "totalSleep Records": 2, "totalTimeInBed": 317 } } Get Sleep Goal Get Sleep Log by Date Range
Context number 17 (score: 0.755140543): 
Response Codes 200 A successful request. 400 The request had bad syntax or was inherently impossible to be satisfied. 401 The request requires user authentication. Note: For a complete list of response codes, please refer to the Troubleshooting Guide . Additional Information Types of sleep logs This endpoint supports two kinds of sleep log types: stages : Levels data is returned with 30-second granularity. 'Sleep Stages' levels include deep, light, rem, and wake. classic : Levels data returned with 60-second granularity. 'Sleep Pattern' levels include asleep, restless, and awake. Note: shortData is only included for stages sleep logs and includes wake periods that are 3 minutes or less in duration. This distinction is to simplify graphically distinguishing short wakes from longer wakes, but they are physiologically equivalent. For information on how to interpret the sleep data, see Interpreting the Sleep Stage and Short Data . Device generated sleep logs The dateOfSleep in the GET sleep log endpoint response is the date on which the sleep event ends. This means that requesting a sleep log for a given date, for example 2021-12-22, may return a log entry that began the previous night on 2021-12-21. This is to account for the fact that sleep periods typically take place overnight between two dates and the dateOfSleep refers to the date the user woke up. If the wake time during the main sleep is greater than 1 hour, the sleep log will be split into 2 logs. Although, if the device syncs during the wake time and consistent steps and hand movement occur for at least 15 minutes, then a sleep log might be generated for the first part of the sleep. The second part of the sleep will be detected when the device syncs in the morning. If the time between the 2 sleep logs is less than 1 hour, the 2 sleep logs will be stitched together. Manually created sleep logs A manual sleep log is either a sleep log that has human input through the mobile or web application, or a 3rd party application records sleep using the Create Sleep Log endpoint. When a sleep log is manually recorded, a "classic" sleep log is generated. Sleep "stage" logs use the device heart rate and movement to calculate sleep stage data. When manually entering a sleep log, this information is typically not available.
Context number 18 (score: 0.754984319): 
. . { "dateTime": "2020-01-26T07:38:30.000", "level": "wake", "seconds": 30 }, { "dateTime": "2020-01-26T07:44:00.000", "level": "wake", "seconds": 30 } ], "summary": { "deep": { "count": 4, "minutes": 46, "thirtyDayAvgMinutes": 0 }, "light": { "count": 19, "minutes": 133, "thirtyDayAvgMinutes": 0 }, "rem": { "count": 8, "minutes": 81, "thirtyDayAvgMinutes": 0 }, "wake": { "count": 21, "minutes": 40, "thirtyDayAvgMinutes": 0 } } }, "logId": 25647389514, "minutesAfterWakeup": 3, "minutesAsleep": 260, "minutesAwake": 40, "minutesToFallAsleep": 0, "logType": "auto_detected", "startTime": "2020-01-26T03:02:30.000", "timeInBed": 300, "type": "stages" } ] } Response Headers content-type The media type of the response content being sent to the client. Supported: application/json fitbit-rate-limit-limit The quota number of calls. fitbit-rate-limit-remaining The number of calls remaining before hitting the rate limit. fitbit-rate-limit-reset The number of seconds until the rate limit resets. Note: The rate limit headers are approximate and asynchronously updated. This means that there may be a minor delay in the decrementing of remaining requests. This could result in your application receiving an unexpected 429 response if you don't track the total number of requests you make yourself. Response Type HTTP Status Code HTTP response code. List of codes are found in the Troubleshooting Guide . Status Message Description of the status code. Response Body Contains the JSON response to the API call. When errors are returned by the API call, the errorType, fieldName and message text will provide more information to the cause of the failure. Response Codes 200 A successful request. 400 The request had bad syntax or was inherently impossible to be satisfied. 401 The request requires user authentication.
Context number 19 (score: 0.75348109): 
sleep : logType The type of sleep in terms of how it was logged. See "logType" for more detail. Supported : auto_detected | manual sleep : startTime Time the sleep log begins. sleep : timeInBed Total number of minutes the user was in bed. sleep : type The type of sleep log. Supported : classic | stages { "sleep": [ { "dateOfSleep": "2020-01-27", "duration": 4560000, "efficiency": 86, "endTime": "2020-01-27T00:17:30.000", "infoCode": 2, "isMainSleep": true, "levels": { "data": [ { "dateTime": "2020-01-26T23:01:00.000", "level": "restless", "seconds": 360 }, { "dateTime": "2020-01-26T23:07:00.000", "level": "asleep", "seconds": 1800 }, . . .
Context number 20 (score: 0.751394451): 
. . { "dateTime": "2020-02-21T06:18:00.000", "level": "wake", "seconds": 60 } ], "summary": { "deep": { "count": 5, "minutes": 104, "thirtyDayAvgMinutes": 69 }, "light": { "count": 32, "minutes": 205, "thirtyDayAvgMinutes": 202 }, "rem": { "count": 11, "minutes": 75, "thirtyDayAvgMinutes": 87 }, "wake": { "count": 30, "minutes": 78, "thirtyDayAvgMinutes": 55 } } }, "logId": 26013218219, "minutesAfterWakeup": 0, "minutesAsleep": 384, "minutesAwake": 78, "minutesToFallAsleep": 0, "logType": "auto_detected", "startTime": "2020-02-20T23:21:30.000", "timeInBed": 462, "type": "stages" } ], "summary": { "stages": { "deep": 104, "light": 205, "rem": 75, "wake": 78 }, "totalMinutesAsleep": 384, "totalSleepRecords": 1, "totalTimeInBed": 462 } } Response Headers content-type The media type of the response content being sent to the client. Supported: application/json fitbit-rate-limit-limit The quota number of calls. fitbit-rate-limit-remaining The number of calls remaining before hitting the rate limit. fitbit-rate-limit-reset The number of seconds until the rate limit resets. Note: The rate limit headers are approximate and asynchronously updated. This means that there may be a minor delay in the decrementing of remaining requests. This could result in your application receiving an unexpected 429 response if you don't track the total number of requests you make yourself. Response Type HTTP Status Code HTTP response code. List of codes are found in the Troubleshooting Guide . Status Message Description of the status code. Response Body Contains the JSON response to the API call. When errors are returned by the API call, the errorType, fieldName and message text will provide more information to the cause of the failure. Response Codes 200 A successful request.