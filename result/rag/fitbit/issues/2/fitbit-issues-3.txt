---------------User Query---------------
request_token = client.request_token
current_user.update(:token => request_token.token, :secret => request_token.secret)
redirect "http://www.fitbit.com/oauth/authorize?oauth_token=#{current_user.token.to_s}"


---------------Response---------------
```ruby
request_token = client.request_token
current_user.update(:token => request_token.token, :secret => request_token.secret)
redirect "https://www.fitbit.com/oauth2/authorize?response_type=code&client_id=<client_id>&scope=activity%20heartrate&redirect_uri=#{CGI.escape('https://myapp.com/callback')}"

# Note: Make sure to replace <client_id> and the redirect URI accordingly.
``` 

This code was updated to use the OAuth 2.0 Authorization Code Grant Flow with PKCE as specified in the latest Fitbit API documentation. The URL structure for authorization has been adjusted to correspond to https://www.fitbit.com/oauth2/authorize with query parameters for response_type, client_id, scope, and redirect_uri.

---------------Similarity Score---------------
0.8339841345

---------------Relevant Context---------------

Context number 1 (score: 0.859368324): 
Appended to the redirect URL is the authorization code located between the "code" parameter name and the string "#_=_". Following is an example of the redirect URL with the authorization code highlighted: https ://myapp.com/callback?code= d62d6f5bdc13df79d9a5f #_=_ Mobile Development : Fitbit recommends using a Universal Link (iOS) or App Link (Android) when redirecting back into the application. Step 4 - Exchange the Authorization Code for the Access and Refresh Tokens The application should extract the authorization code from the redirect URL and exchange it for the access token and refresh token. The tokens are obtained by calling the /oauth2/token endpoint and providing the following parameters within the body of the HTTPS POST request. See Token API for more information The required query parameters are: client_id : The Fitbit API application ID from https://dev.fitbit.com/apps . code : The authorization code code_verifier : The code verifier value from step 1. grant_type : authorization_code The application type (server, client or personal) defined in the registered application settings determines how the Token API endpoint is authorized to Fitbit. Server Application Type Server application types must authenticate themselves using the client secret available in application settings. This provides the highest level of security to the OAuth 2.0 flow. However it should only be used by applications that can securely store the client secret, such as apps running on a web server. Notably, the client secret should never be included in application source code or stored on an end-user device where it can be discovered. These applications authenticate by specifying the Authorization header to the request, and include the "Basic" token. The basic token is a base64-encoded concatenation of the client ID and secret, separated by a colon: BASE64ENCODE(<client_id>:<client_secret>) For example, with a client ID “ABC123” and secret “DEF456”, POST https ://api.fitbit.com/oauth2/token Authorization: Basic QUJDMTIzOkRFRjQ1Ng== Content-Type: application/x-www-form-urlencoded client_id=ABC123&code=<authorization_code>&code_verifier=<code_verifier>&grant_type=authorization_code Client and Personal Application Types Client and personal application types can call /oauth2/token without any additional security requirements. This should only be used when the application cannot safely store the client secret.
Context number 2 (score: 0.85677886): 
This should only be used when the application cannot safely store the client secret. For example, POST https ://api.fitbit.com/oauth2/token Content-Type: application/x-www-form-urlencoded client_id=ABC123&code=<authorization_code>&code_verifier=<code_verifier>&grant_type=authorization_code Step 5 - Receive the Access and Refresh Tokens The Token endpoint returns a JSON-encoded response that includes: The user id of the person who authorized access The access token used to query the user's data The refresh token the application will use to obtain a new access and refresh token pair The lifespan of the access token in seconds The scopes the user enabled on the Fitbit Authorization page We recommend the application store this information and refer back to it as needed. If the application loses the refresh token for a user, the user will need to re-authorize the application, again. Example { "access_token": "<access_token>", "expires_in": 28800, "refresh_token": "<refresh_token>", "scope": "activity heartrate nutrition oxygen_saturation respiratory_rate settings sleep temperature weight", "token_type": "Bearer", "user_id": "<user_id>" } Other Supported Authorization Flows Authorization Code Grant Flow (without PKCE) This is the original variant of Authorization Code Grant flow, defined by RFC 6749 , which is superseded by PKCE. Unlike PKCE, this variant does not support the code verifier or challenge values when requesting user authorization. Instead, two other methods are used to help secure this flow. Only server application types may omit PKCE. This means that a client secret must be used when obtaining access and refresh tokens To protect against Cross Site Request Forgery (CSRF) attacks, the application should pass an anti-forgery token in the "state" parameter when showing the Authorization page. This should be an unguessable value associated with the user. Fitbit will pass back this value as a query parameter in the redirect URL, and your application must verify that it matches. Implicit Grant Flow Defined by RFC 6749 , this authorization flow is no longer recommended as an OAuth 2.0 best practice. Unlike the Authorization Code Grant flow, the authorization page directly returns an access token making the consent process highly susceptible to a number of security attacks . When using the Implicit Grant flow, The registered application must be configured with the "client" OAuth 2.0 Application type.
Context number 3 (score: 0.856776476): 
OAuth2 Token The /oauth2/token endpoint can do the following: Exchange the authorization code for the initial access token and refresh token (See OAuth2 Token ). This process is required when using the Authorization Code Grant Flow. Obtain a new access token and refresh token when the existing access token has expired (See Refresh Token ). Initiate the Client Credentials authorization flow (See Client Credentials ). Request POST /oauth2/token Body Parameters code required The authorization code received in the redirect as a URI parameter. The authorization code is only valid for 10 minutes. Type: string grant_type required Supported: authorization_code Type: string client_id required for client apps This is your Fitbit API application ID from your settings on https://dev.fitbit.com . Apps set to type "client" should use this to pass their ID instead of the Authorization header. Type: string redirect_uri recommended / required Required if specified in the redirect to the authorization page. Must be exact match. Type: URI expires_in optional Specifies the desired access token lifetime. 28800 for 8 hours Supported: 28800 Type: integer code_verifier (For use with PKCE only) required The code verifier is used to derive the code challenge while obtaining the access code in the authorization request. This string is the base64url-encoding of a cryptographically, random-generated octet sequence. Type: string Request Headers authorization (For use with server apps only) required Must be set to Basic followed by a space, then the Base64 encoded string of your application's client id and secret concatenated with a colon. For example, the Base64 encoded string, Y2xpZW50X2lkOmNsaWVudCBzZWNyZXQ= , is decoded as "client_id:client secret" . Token type: Basic accept optional The media type of the response content the client is expecting. Supported: application/json accept-language optional The measurement unit system to use for response values. See Localization . accept-locale optional The locale to use for response values. See Localization .
Context number 4 (score: 0.854764342): 
Step 2 - Request Authorization to Fitbit User Data Using a web browser, the application calls the Authorize endpoint to display Fitbit's Authorization page to the user. If necessary, the user may need to log in with their Fitbit credentials. Mobile Development : Use either custom tabs (Android) or the SFSafariViewController (iOS) instead of their webview counterparts. This allows the Fitbit user to know they are logging into the secure Fitbit site. The required query parameters are: client_id : The Fitbit API application ID from https://dev.fitbit.com/apps . scope : A space-delimited list of data collections requested by the application. code_challenge : The base64url-encoded SHA256 hash of the code verifier. code_challenge_method : S256 response_type : code For example, the following URL will load the Authorization page https ://www.fitbit.com/oauth2/authorize?client_id=ABC123&response_type=code &code_challenge=<code_challenge>&code_challenge_method=S256 &scope=activity%20heartrate%20location%20nutrition%20oxygen_saturation%20profile %20respiratory_rate%20settings%20sleep%20social%20temperature%20weight The user will select the data collections, or scopes, they want to share with the application. If the user has previously consented to the same requested scopes, the flow will skip this UI and proceed directly to the next step. NOTE : The application is not allowed to enable all scopes by default or force a user to enable all scopes. Instead, we suggest encouraging the users to enable all scopes by stating something like “For the best user experience, we recommend you enable all listed scopes” See Fitbit’s Platform Terms of Service for more details. It is ultimately up to the Fitbit user whether or not all of the scopes are enabled. Therefore, the application should not break if a scope is not granted. Step 3 - Retrieving the Authorization Code Once the user authorizes access to their data, Fitbit returns the user back to the application using the redirect URL. Appended to the redirect URL is the authorization code located between the "code" parameter name and the string "#_=_".
Context number 5 (score: 0.854444623): 
Authorize Initiates the OAuth 2.0 authorization flow by presenting the consent screen to the Fitbit user. Request URL https://www.fitbit.com/oauth2/authorize Query Parameters client_id required This is the Fitbit API application id created within dev.fitbit.com . Type: string response_type required code for Authorization Code Grant Flow [with PKCE] token for Implicit Grant Flow. Type: string scope required A space-delimited list of the permissions you are requesting. See Scopes . Type: string redirect_uri recommended Where Fitbit should send the user after the user grants or denies consent. Required unless only one redirect URI is specified for the application in the settings on dev.fitbit.com . See Redirect URIs . Type: URI expires_in optional For use with the Implicit Grant Flow only. Pre-select the desired access token lifetime. Authorization Code Grant flow [with PKCE] access tokens only support a lifetime of 8 hours (e.g. 28800). 86400 for 1 day 604800 for 1 week 2592000 for 30 days 31536000 for 1 year Default: 86400 Type: string prompt optional Specify if you need to force the Fitbit authentication or the OAuth 2.0 authorization page to be displayed. When used, the redirect_uri parameter must be specified. none for default behavior. consent to require consent from the user, even if they have previously authorized your application. login to require the user to sign in, but request consent according to the default behavior. login consent to require the user to sign in and authorize your application. The space in this parameter value needs to be URL encoded. Type: string state recommended Provides any state that might be useful to your application when the user is redirected back to your application. This parameter will be added to the redirect URI exactly as your application specifies. Fitbit strongly recommend including an anti-forgery token in this parameter and confirming its value in the redirect to mitigate against cross-site request forgery (CSRF). Type: string code_challenge (For use with PKCE only) optional / required The code challenge is derived from the code verifier by using a transformation on the code verifier. The code verifier is a cryptographically random string dynamically created for each authorization request. The available transformations are S256 and plain .
Context number 6 (score: 0.848279417): 
Refresh Token The /oauth2/token endpoint can do the following: Exchange the authorization code for the initial access token and refresh token (See OAuth2 Token ). This process is required when using the Authorization Code Grant Flow. Obtain a new access token and refresh token when the existing access token has expired (See Refresh Token ). Initiate the Client Credentials authorization flow (See Client Credentials ). Request POST /oauth2/token Body Parameters grant_type required Supported: refresh_token Type: string refresh_token required The refresh token issued to you by Fitbit. Type: string client_id required for client apps This is your Fitbit API application ID from your settings on https://dev.fitbit.com . Apps set to type "client" should use this to pass their ID instead of the Authorization header. Type: string expires_in optional Specifies the desired access token lifetime. 28800 for 8 hours Supported: 28800 Type: integer Request Headers authorization (For use with server apps only) required Must be set to Basic followed by a space, then the Base64 encoded string of your application's client id and secret concatenated with a colon. For example, the Base64 encoded string, Y2xpZW50X2lkOmNsaWVudCBzZWNyZXQ= , is decoded as "client_id:client secret" . Token type: Basic accept optional The media type of the response content the client is expecting. Supported: application/json accept-language optional The measurement unit system to use for response values. See Localization . accept-locale optional The locale to use for response values. See Localization .
Context number 7 (score: 0.847573042): 
Client Credentials Grant Flow The /oauth2/token endpoint can do the following: Exchange the authorization code for the initial access token and refresh token (See OAuth2 Token ). This process is required when using the Authorization Code Grant Flow [with PKCE]. Obtain a new access token and refresh token when the existing access token has expired (See Refresh Token ). Initiate the Client Credentials authorization flow (See Client Credentials ). Fitbit follows the OAuth 2.0 Client Credentials flow as specified in RFC 6749 . This authorization flow is used with specific Fitbit API endpoints related to business operations. It is not supported by the public Web APIs to retrieve Fitbit user data. The Client Credentials Grant flow has the following steps: The application sends a request to https ://api.fitbit.com/oauth2/token with its client_id and client_secret; and Fitbit authenticates your application and issues an access token. Request POST /oauth2/token Body Parameters grant_type required Supported: client_credentials Type: string expires_in optional Pre-select the desired access token lifetime. 3600 for 1 hour 28800 for 8 hours 86400 for 1 day 604800 for 1 week 2592000 for 30 days 31536000 for 1 year Default: 28800 Type: string Request Headers authorization required Must be set to Basic followed by a space, then the Base64 encoded string of your application's client id and secret concatenated with a colon. For example, the Base64 encoded string, Y2xpZW50X2lkOmNsaWVudCBzZWNyZXQ= , is decoded as "client_id:client secret" . Token type: Basic accept optional The media type of the response content the client is expecting. Supported: application/json accept-language optional The measurement unit system to use for response values. See Localization . accept-locale optional The locale to use for response values. See Localization . Examples URL CURL POST https ://api.fitbit.com/oauth2/token Authorization: Basic <basic_token> Content-Type: application/x-www-form-urlencoded grant_type=client_credentials curl -X POST "https ://api.fitbit.com/oauth2/token" \ -H "accept: application/json" \ -H "authorization: Basic <basic_token>" \ -d "grant_type=client_credentials" Response Description Example Response Element Name Description access_token The active access token.
Context number 8 (score: 0.840001285): 
When using the Implicit Grant flow, The registered application must be configured with the "client" OAuth 2.0 Application type. The user may specify a lifetime for the access token up to one year. After the user consents, the redirect URL contains the access token. A refresh token is not provided. Once the access token expires, the user will need to authorize the application again. With the Implicit Grant FLow, Fitbit will pass the following parameters to the application's redirect URL after the # access_token The access token your application should use to call endpoints on behalf of the user. expires_in The lifetime of the access token in seconds. scope A space-separated list of scopes the user authorized. state recommeded Provides any state that might be useful to your application when the user is redirected back to your application. This parameter will be added to the redirect URI exactly as your application specifies. Fitbit strongly recommend including an anti-forgery token in this parameter and confirming its value in the redirect to mitigate against cross-site request forgery (CSRF). token_type Supported : Bearer user_id The Fitbit user id Client Credentials Defined by RFC 6749 , this authorization flow is used with specific Fitbit API endpoints related to business operations. It is not supported by the public Web APIs to retrieve Fitbit user data. See Client Credentials Getting Started Application Design
Context number 9 (score: 0.836695731): 
Authorization The Authorization endpoints allow an application to onboard Fitbit users who want to share their data with the specified application. The application can initiate the consent flow for new users, obtain the access token and refresh tokens, validate the tokens, and revoke consent to the user. Fitbit supports OAuth 2.0. The authorization models we support are Authorization Code Grant Flow, Authorization Code Grant Flow with PKCE and Implicit Grant Flow. We recommend Authorization Code Grant Flow with PKCE, and our examples demonstrate how to set it up. Client Credentials is supported but does not allow the retrieval of user data. It works only with the Fitbit Commerce APIs. The endpoints available in this section are Authorize initiates the OAuth 2.0 authorization flow by presenting the consent screen to the Fitbit user. Client Credentials initiates the Client Credentials Grant flow. This authorization flow does not support retrieving Fitbit user data. Introspect allows the application to retrieve the active state of an OAuth 2.0 token. OAuth2 Token exchanges the authorization code for the initial access token and refresh token. Refresh Token creates a new access token and refresh token for a user when the existing access token has expired. Revoke Token disables a user's authorization and all associated tokens. Activity Time Series Body
Context number 10 (score: 0.836252511): 
Authorization Fitbit requires applications use the OAuth 2.0 Authorization Framework to securely authorize access to Fitbit user data. Fitbit recommends using the best OAuth 2.0 or HTTP client library available for your preferred application platform and programming language. Many times, these libraries contain sample code to help you get started. Fitbit’s Web API uses a common implementation of the OAuth 2.0 specification, so a Fitbit-specific library is not required. For a list of OAuth 2.0 libraries suggested by our developer community, see Libraries and Sample Code For a complete interactive walkthrough of the authorization flow see the OAuth 2.0 Tutorial . There are three main steps to OAuth 2.0: Request authorization from a user to access their data. Query the user's data using the provided access token . Refresh expired access tokens with the corresponding refresh token . Authorization Code Grant Flow with PKCE There are several authorization flows specific to the OAuth 2.0 protocol. For best security, Fitbit recommends using the Authorization Code Grant Flow with Proof Key for Code Exchange (PKCE) defined by RFC 7636 . PKCE supplements the Authorization Code Grant flow with a dynamically created cryptographically random key (“code verifier”) and its transform value (“code challenge”) to verify the client. Any application will get added security with the ability to mitigate authorization code interception attacks. This section will demonstrate in five steps how an application obtains the user’s authorization using PKCE. Step 1 - Generate the Code Verifier and Code Challenge The application needs to generate two values to keep the OAuth 2.0 protocol and the Fitbit user data secure: A cryptographically random value between 43-128 characters long called a code verifier A SHA-256 hash of the code verifier, base64url encoded with padding omitted, called the code challenge Transforming the code verifier into the code challenge requires the use of libraries that implement the SHA-256 hash and Base64Url encoding specifications. The optional Base64Url padding characters ( = ) should be omitted. For example, if the code verifier is 01234567890123456789012345678901234567890123456789 , the pseudocode base64UrlEncode(sha256Hash(code_verifier)) should produce a code challenge of -4cf-Mzo_qg9-uq0F4QwWhRh4AjcAqNx7SbYVsdmyQM .
Context number 11 (score: 0.835248649): 
OAuth 2.0 refers to these permissions as “scopes”. Applications should only request permission for scopes they intend to access or modify. NOTE : The application is not allowed to enable all scopes by default or force a user to enable all scopes. Instead, we suggest encouraging the users to enable all scopes by stating something like “For the best user experience, we recommend you enable all listed scopes” See Fitbit’s Platform Terms of Service for more details. It is ultimately up to the Fitbit user whether or not all of the scopes are enabled. Therefore, the application should not break if a scope is not granted. Displaying the Authorization Page If an access token is not automatically available to Fitbit, the Fitbit OAuth 2.0 Authorization page is presented to the user in a web form during the authorization process. For security consideration, the consent page must be presented in a dedicated browser view. Fitbit users can only confirm they are authenticating with the genuine Fitbit.com site if they have the tools provided by the browser, such as the URL bar and Transport Layer Security (TLS) certificate information. Native applications - the authorization page must open in the default browser. Native applications can use custom URL schemes as redirect URIs to redirect the user back from the browser to the application requesting permission. iOS applications - may use the SFSafariViewController class instead of app switching to Safari. Use of the WKWebView or UIWebView class is prohibited. Android applications - may use Chrome custom tabs instead of application switching to the default browser. Use of WebView is prohibited. Web applications - do not use an iframe. Web applications may use a pop-up window, so long as the URL bar is visible. WARNING - DO NOT embed the Authorization Page. Any attempt to embed the OAuth 2.0 authentication page will result in your application being banned from the Fitbit API. Tokens A token is an object that provides access to a specific resource. The Fitbit Web APIs utilize 3 different types of tokens. The Basic Token is the Base64 encoded string of the application's client id and secret concatenated with a colon (e.g. [client_id]:[client_secret]). The basic token is used with access token and refresh token requests. The Access Token , also known as the Bearer Token, is a unique, signed JWT object used to denote the permissions a Fitbit user has granted to a specific application.
Context number 12 (score: 0.825995564): 
Web API Best Practices Requesting Scopes Fitbit displays a consent screen to the user, asking them to authorize your application to access their data. The data your application needs to access will correspond to the scopes your application needs to request. Choose the scopes responsibly. Don't request every scope just in case your application might need it. Only ask for the scope(s) your application requires now, so users are more likely to grant access. Users more readily grant access to limited, clearly described scopes. Your application should not fail if a user does not select all scopes presented. If your application requires all scopes presented, then you can show the text "For the best user experience, we recommend enabling all scopes." Using Tokens Effectively When a Fitbit user consents through the Authorization Code Grant Flow, the application is provided with an active access token and refresh token. The access token and refresh token are unique to each user and associated with only the client ID in which they were created. The access token grants permission to access the Fitbit user data. This token has a default lifespan of 8 hours before becoming invalid. For the application to maintain their consent, the refresh token should be used when the access token expires to get a new access token/refresh token pair. The refresh token never expires, but can only be used once. After the refresh token has been used, it becomes invalid and the application has to use a new refresh token. A user may have multiple active access tokens for a single application. However, each user will only have one active refresh token. When the access token expires, the application can use the active refresh token to obtain a new access token and refresh token pair. Once the refresh token is used, it becomes invalid and is replaced by the new active refresh token. Your application should store both the access token and refresh token and correctly maintain which tokens are active. Note : If a client makes identical refresh token requests, the Fitbit Web API will return the same response unless the newly issued access or refresh token is used in this interval. This is to assist applications unable to coordinate the refresh token flow in the multi-threaded processes or multi-servers world. Examples Suppose the application is only using a single access token per user.
Context number 13 (score: 0.821434081): 
400 The request had bad syntax or was inherently impossible to be satisfied. 401 The request requires user authentication. Note: For a complete list of response codes, please refer to the Troubleshooting Guide . Additional Information Revoked tokens Users have granular control over read/write access to their data through the Fitbit Web API. When a user revokes consent to your application, their access token becomes invalid and your access to that user's data through the Web API is no longer available. What you do with the data that has already been collected should be clearly documented in your Terms of Service and Privacy Policy. Any guidelines or requirements defined by Fitbit will be specified in our Platform Terms of Service . Revoking refresh tokens When a /oauth2/revoke request is made with a refresh_token that is not present in our database, the service will respond with an HTTP status code of 404 (NOT_FOUND). This signifies that the client can safely remove the corresponding refresh_token from their own storage, as it is no longer valid on the server-side. This provides clients with a clear indication to the status of their refresh tokens, enabling them to maintain accurate and efficient token management practices. Refresh Token
Context number 14 (score: 0.81950742): 
Getting Started with the Fitbit APIs Creating a Fitbit Developer Account To use the Fitbit APIs, you need to have a Fitbit developer account. To create a developer account, Go to https://accounts.fitbit.com/signup to register for a fitbit.com account. The email address must be valid to complete the verification process. An existing fitbit.com account can be used. A verification email will be sent to the user requesting a response. Once the email address is verified, the user will be able to access https://dev.fitbit.com/apps to register new applications used to query the Web APIs. To change the registered email address of the Fitbit developer account, please contact Fitbit Web API support for assistance. TIP: For larger organizations, we recommend the developer account email address be a distribution list. Distribution lists are easier to manage ownership as people migrate throughout the company. Registering an Application An application must be registered within the developer account prior to calling the Fitbit Web APIs for the first time. Each registered application is provided with a client ID and secret. These client credentials will need to be referenced by the application during user authorization. Steps to register your application with Fitbit Go to https://dev.fitbit.com/apps In the upper right hand corner, click the link "Register a new application" or Go to https://dev.fitbit.com In the upper right hand corner, click on Manage -> Register an App Fill out the following fields: Application Name required The name of your application. Description required Describe what your application does. Application Website required The URL that points to your application website or download page. This URL is presented to the user during consent. Organization required The name of your company or organization. Organization Website required Your company or organization website URL. Terms of Service URL required The link to your Terms of Service document related to this application. It will be presented to the user during consent. Privacy Policy URL required The link to your Privacy Policy document related to this application. It will be presented to the user during consent. OAuth 2.0 Application Type required Supported: Server | Client | Personal See Application Types Callback URL required A link sending the onboarding user back to your application. The URL must be absolute. See Redirect URL .
Context number 15 (score: 0.817763329): 
The basic token is used with access token and refresh token requests. The Access Token , also known as the Bearer Token, is a unique, signed JWT object used to denote the permissions a Fitbit user has granted to a specific application. Access tokens are generated for all authorization flows and are used when executing an API call. These tokens can be used multiple times, but they do have an expiration date. The Refresh Token is used to obtain a new access token and a new refresh token when the existing access token has expired. This is supported only with the Authorization Code Grant flow. Refresh tokens are unique to its associated access token. They can only be used once, but do not expire. Note : Fitbit API access tokens use the JSON Web Token (JWT) format. Fitbit reserves the right to change the contents and format of these tokens at any time. Client applications should not create dependencies upon the token format. Access tokens and refresh tokens may be up to 1,024 bytes in size. Access tokens An access token intentionally is short lived. This is an important security mechanism of OAuth 2.0. When using the Authorization Code Grant Flow, the access tokens have an eight-hour lifetime by default. To make a request to the Fitbit API using OAuth 2.0, simply add an Authorization header to the HTTPS request with the user's access token. Example GET https ://api.fitbit.com/1/user/-/profile.json Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJleH... When an access token expires, an HTTP 401 error will be returned. Your application will need to use the refresh token to obtain a new access token and refresh token pair. See Refresh Token . Revoked tokens Users have granular control over read/write access to their data through the Fitbit Web API. When a user revokes consent to your application, their access token becomes invalid and your access to that user's data through the Web API is no longer available. What you do with the data that has already been collected should be clearly documented in your Terms of Service and Privacy Policy. Any guidelines or requirements defined by Fitbit will be specified in our Platform Terms of Service . Universal Links / App Links Developers who would like to redirect users from their application to the Fitbit mobile application can do so using either Universal Links on iOS or App Links on Android.
Context number 16 (score: 0.816683471): 
Fitbit-Rate-Limit-Remaining : The number of calls remaining before hitting the rate limit. Fitbit-Rate-Limit-Reset : The number of seconds until the rate limit resets. The data in the rate limit headers is updated asynchronously and is approximate. A slight delay when decrementing the remaining count could be expected for larger implementations. This would result with the application receiving a 429 Too Many Requests status code sooner than anticipated, if the application does not track its usage. Automatic Email Notices The Fitbit Web API will email the application owner when the hourly rate limit has exceeded. These are courtesy notices. Action is not required unless there is interest to optimize the Fitbit integration. Redirect URL This URL is the location in your application the Fitbit user is sent after user consent has occurred. During the authorization process, the user is sent to Fitbit’s OAuth 2.0 Authorization web page. The user is returned back to your application after successful authorization via the redirect URL. Native applications can use custom URL schemes as redirect URLs to redirect the user from the browser back to the application requesting permission. According to RFC 3986, Section 4.3 , the redirect URL is absolute and should not be fragmented. The syntax for the redirect URL should be absolute-URI = scheme ":" hier-part [ "?" query ] You must specify the full redirect URL in your application settings on https://dev.fitbit.com . An application may have multiple redirect URLs registered by putting one redirect URL per line in your application settings. Fitbit strongly recommends that you always specify the intended redirect URL value with the redirect_uri parameter when sending users to the authorization page. The redirect_uri must be an exact match to one of the values specified in your application settings. Note : Use the state parameter if you need variability in your redirect URI. Unicode characters are allowed, but should be converted to punycode. Not doing so will result in a URL mismatch during the OAuth flow. When using the Authorization Code Grant Flow or the Authorization Code Grant Flow with PKCE, Fitbit will append #_=_ at the end of your redirect URL upon success or failure of the authorization. Note : Fitbit only supports HTTPS for redirect URLs. Social Login Support The Fitbit Web API supports social login (Google only) only for the Authorization Grant Flows as part of the web single sign-on (SSO).
Context number 17 (score: 0.815764): 
OAuth 2.0 Libraries and Sample Code WARNING: Fitbit does not recommend or endorse any of these links. Use at your own risk. OAuth 2.0 Libraries The Fitbit Web API is a common implementation of the OAuth 2.0 specification. You don't need a Fitbit-specific library to use the Fitbit Web API. Instead, we recommend that you use the best OAuth 2.0 or HTTP client library available for your platform. If you don't have a favorite OAuth 2.0 or HTTP library yet, we’ve listed some below that people have told us worked for them. If we don’t have your favorite listed, tell us on the forum . These libraries may contain sample code to get your started. We’ve included other sample code and tutorials below. C# (.NET) Fitbit.NET by Aaron Coleman - https://github.com/aarondcoleman/Fitbit.NET Java ScribeJava - https://github.com/scribejava/scribejava JavaScript for Node.js Fitbit strategy for Passport - https://www.npmjs.com/package/passport-fitbit-oauth2 PHP Fitbit provider for PHP League’s OAuth 2.0 client - https://github.com/djchen/oauth2-fitbit Python python-fitbit by Orcas - https://github.com/orcasgit/python-fitbit R fitbitr by Nagi Teramo - https://github.com/teramonagi/fitbitr Unity UnityFitbit by Travis Evashkevich - https://github.com/TravisEvashkevich/UnityFitbit Others can be found here https://oauth.net/code/#client-libraries Sample Code Many of the OAuth 2.0 libraries provide sample code. We've provided some additional samples below. Also, there are plenty of other code examples that our developer communioty has created which can be found through internet searches. Fitbit's Device SDK https://dev.fitbit.com/build/tutorials/examples/#web-api-oauth Go Fitbit Web API Go client by galeone - https://github.com/galeone/fitbit Google Sheets GoogleFitbit by JKybett - https://github.com/JKybett/GoogleFitBit Python Fitbit API Access Using OAuth 2.0 and Raspberry Pi (January 2016) - http://pdwhomeautomation.blogspot.com/2016/01/fitbit-api-access-using-oauth20-and.html Best Practices
Context number 18 (score: 0.814042): 
expires_in The time the access token expires in seconds. refresh_token The updated active refresh token. token_type Supported : Bearer user_id The Fitbit user ID associated with the access token and refresh token { "access_token": "eyJhbGciOiJIUzI1...", "expires_in": 28800, "refresh_token": "c643a63c072f0f05478e9d18b991db80ef6061e...", "token_type": "Bearer", "user_id": "GGNJL9" } Response Headers content-type The media type of the response content being sent to the client. Supported: application/json fitbit-rate-limit-limit The quota number of calls. fitbit-rate-limit-remaining The number of calls remaining before hitting the rate limit. fitbit-rate-limit-reset The number of seconds until the rate limit resets. Note: The rate limit headers are approximate and asynchronously updated. This means that there may be a minor delay in the decrementing of remaining requests. This could result in your application receiving an unexpected 429 response if you don't track the total number of requests you make yourself. Response Type HTTP Status Code HTTP response code. List of codes are found in the Troubleshooting Guide . Status Message Description of the status code. Response Body Contains the JSON response to the API call. When errors are returned by the API call, the errorType, fieldName and message text will provide more information to the cause of the failure. Response Codes 200 A successful request. 400 The request had bad syntax or was inherently impossible to be satisfied. 401 The request requires user authentication. Note: For a complete list of response codes, please refer to the Troubleshooting Guide . Additional Information JSON Web Tokens Fitbit API access tokens use the JSON Web Token (JWT) format. Fitbit reserves the right to change the contents and format of these tokens at any time. Client applications should not create dependencies upon the token format. Access tokens and refresh tokens may be up to 1,024 bytes in size. Web Browser Compatibility The Fitbit API and its implementation of OAuth 2.0 are designed to work with the current and one previous version of Apple Safari, Google Chrome, Microsoft Edge, and Mozilla Firefox. When a new version of a web browser is released, Fitbit begins supporting that version and stop supporting the third most recent version. Introspect Refresh Token
Context number 19 (score: 0.813133478): 
token_type Supported : Bearer Returned with Implicit Grant Flow. expires_in Time when the access token expires. Returned with Implicit Grant Flow. scope List of scopes enabled by the Fitbit user. Returned with Implicit Grant Flow. Authorization Code Grant Flow [with PKCE] https ://example.com/callback?code=<authorization_code>#_=_0 Implicit Grant Flow https ://example.com/callback#access_token=<access_token> &user_id=<user_id> &token_type=Bearer &expires_in=604800 &scope=social+weight+nutrition+profile... Response Headers content-type The media type of the response content being sent to the client. Supported: application/json fitbit-rate-limit-limit The quota number of calls. fitbit-rate-limit-remaining The number of calls remaining before hitting the rate limit. fitbit-rate-limit-reset The number of seconds until the rate limit resets. Note: The rate limit headers are approximate and asynchronously updated. This means that there may be a minor delay in the decrementing of remaining requests. This could result in your application receiving an unexpected 429 response if you don't track the total number of requests you make yourself. Response Type HTTP Status Code HTTP response code. List of codes are found in the Troubleshooting Guide . Status Message Description of the status code. Response Body Contains the JSON response to the API call. When errors are returned by the API call, the errorType, fieldName and message text will provide more information to the cause of the failure. Response Codes For a complete list of authorization errors, please refer to the Troubleshooting Guide . Additional Information Localizing the consent page The Fitbit consent page supports localization. Since it is just a web form, the text is translated based on the user's "Language by Region/Country" setting in their Fitbit account. The user's device or browser language settings may translate the consent language, as well. We do not support a query parameter that forces language conversion. Client Credentials Grant Flow
Context number 20 (score: 0.809176087): 
Note : Fitbit only supports HTTPS for redirect URLs. Social Login Support The Fitbit Web API supports social login (Google only) only for the Authorization Grant Flows as part of the web single sign-on (SSO). When the OAuth 2.0 authorization flow requires access to the Fitbit user’s account while prompting for user consent, social login can be used with the Fitbit web application. If the user has already logged into their www.fitbit.com account using their Google account, they won’t be shown the sign-in form prior to the authorization consent form, unless prompt=login. Scopes All Fitbit API endpoints that retrieve user data require user consent to that data collection through one or more scopes. The application must provide the list of scopes when calling the Authorize endpoint. The access token issued will only contain the scopes the Fitbit user authorized. Available Scopes activity Includes activity data and exercise log related features, such as steps, distance, calories burned, and active minutes. cardio_fitness Includes the maximum or optimum rate at which the user’s heart, lungs, and muscles can effectively use oxygen during exercise. electrocardiogram Includes the user's on-device ECG readings. heartrate Includes the continuous heart rate data and related analysis. irregular_rhythm_notifications Includes the user's engagement and list of irregular rhythm notification alerts. location Includes the GPS and other location data. nutrition Includes calorie consumption and nutrition related features, such as food/water logging, goals, and plans. oxygen_saturation Includes measurements of blood oxygen level. profile Includes basic user information. respiratory_rate Includes measurements of average breaths per minute at night. settings Includes user account and device settings, such as alarms. sleep Includes sleep logs and related sleep analysis. social Includes friend-related features, such as friend list and leaderboard. temperature Includes skin and core temperature data. weight Includes weight and body fat information, such as body mass index, body fat percentage, and goals. Obtaining Consent through Scopes When the application begins the authorization process, the OAuth 2.0 Authorization page will be displayed to the Fitbit user requesting permission to access the data sets that are required by the application. OAuth 2.0 refers to these permissions as “scopes”. Applications should only request permission for scopes they intend to access or modify.