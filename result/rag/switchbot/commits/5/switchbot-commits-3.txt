---------------User Query---------------
BASE_END_POINT = 'https://api.switch-bot.com/v1.0'
devices = requests.get(
    url=BASE_END_POINT + '/devices',
    headers={
        'Authorization': os.environ['SWITCH_BOT_OPEN_TOKEN']
    }
).json()['body']

class LivingCurtains():
    def __init__(self):
        for k, v in enumerate(devices['deviceList']):
            if v['deviceName'] == 'カーテン':
                key = k
                break
        self.__devices_ids = devices['deviceList'][key]['curtainDevicesIds']

    def open(self) -> None:
        for device_id in self.__devices_ids:
            requests.post(
                url=f'{BASE_END_POINT}/devices/{device_id}/commands',
                headers={
                    'Authorization': os.environ['SWITCH_BOT_OPEN_TOKEN'],
                    'Content-Type': 'application/json; charset=utf8',
                },
                data=json.dumps({
                    'command': 'turnOn',
                    'parameter': 'default',
                    'commandType': 'command'
                })
            )

class InfraredRemoteDevice():
    def __init__(self, deviceName:str):
        for k, v in enumerate(devices['infraredRemoteList']):
            if v['deviceName'] == deviceName:
                key = k
                break
        self.__devices_id = devices['infraredRemoteList'][key]['deviceId']

    def turn_off(self) -> None:
        requests.post(
            url=f'{BASE_END_POINT}/devices/{self.__devices_id}/commands',
            headers={
                'Authorization': os.environ['SWITCH_BOT_OPEN_TOKEN'],
                'Content-Type': 'application/json; charset=utf8',
            },
            data=json.dumps({
                'command': 'turnOff',
                'parameter': 'default',
                'commandType': ''
            })
        )


---------------Response---------------
```python
BASE_END_POINT = 'https://api.switch-bot.com/v1.1'
devices = requests.get(
    url=BASE_END_POINT + '/devices',
    headers={
        'Authorization': os.environ['SWITCH_BOT_OPEN_TOKEN'],
        'sign': '',
        'nonce': '',
        't': ''
    }
).json()['body']

class LivingCurtains():
    def __init__(self):
        for k, v in enumerate(devices['deviceList']):
            if v['deviceName'] == 'カーテン':
                key = k
                break
        self.__devices_ids = devices['deviceList'][key]['curtainDevicesIds']

    def open(self) -> None:
        for device_id in self.__devices_ids:
            requests.post(
                url=f'{BASE_END_POINT}/devices/{device_id}/commands',
                headers={
                    'Authorization': os.environ['SWITCH_BOT_OPEN_TOKEN'],
                    'Content-Type': 'application/json',
                    'sign': '',
                    'nonce': '',
                    't': ''
                },
                data=json.dumps({
                    'command': 'turnOn',
                    'parameter': 'default',
                    'commandType': 'command'
                })
            )

class InfraredRemoteDevice():
    def __init__(self, deviceName:str):
        for k, v in enumerate(devices['infraredRemoteList']):
            if v['deviceName'] == deviceName:
                key = k
                break
        self.__devices_id = devices['infraredRemoteList'][key]['deviceId']

    def turn_off(self) -> None:
        requests.post(
            url=f'{BASE_END_POINT}/devices/{self.__devices_id}/commands',
            headers={
                'Authorization': os.environ['SWITCH_BOT_OPEN_TOKEN'],
                'Content-Type': 'application/json',
                'sign': '',
                'nonce': '',
                't': ''
            },
            data=json.dumps({
                'command': 'turnOff',
                'parameter': 'default',
                'commandType': 'command'
            })
        )
```

---------------Similarity Score---------------
0.7910452365

---------------Relevant Context---------------

Context number 1 (score: 0.82059294): 
SwitchBot API v1.0 SwitchBot API Introduction Getting Started Authentication Open Token Glossary API Usage Host Domain Sending a Request Content-Type Request limit Request Header Standard HTTP Error Codes Devices Get device list Description Responses Sample Get all devices Get device status Description Path parameters Responses Sample SwitchBot Meter example SwitchBot Curtain example Send device control commands Description Command set for physical devices Command set for virtual infrared remote devices Path parameters Request body parameters Response Errors Sample Bot example Infrared remote device example Scenes Get scene list Description Response Errors Sample Get all scenes Execute manual scenes Description Path parameters Errors Sample Execute a scene Webhook Setup webhook Description Request Request body parameters Response Query webhook Description Request Request body parameters queryUrl queryDetails Response queryUrl queryDetails Update webhook Description Request Request body parameters Response Delete webhook Description Request Request body parameters Response Receive events from webhook Motion Sensor Contact Sensor Meter Meter Plus Lock Indoor Cam Pan/Tilt Cam Color Bulb LED Strip Light Plug Mini (US) Plug Mini (JP) Introduction This document describes a collection of SwitchBot API methods, examples, and best practices for, but not limited to, IoT hobbyists, developers, and gurus to make their own smart home programs or applications. Getting Started Please follow these steps, Download the SwitchBot app on App Store or Google Play Store Register a SwitchBot account and log in into your account Generate an Open Token within the app a) Go to Profile > Preference b) Tap App Version 10 times. Developer Options will show up c) Tap Developer Options d) Tap Get Token Roll up your sleeves and get your hands dirty with SwitchBot OpenAPI! Authentication Open Token The token returned from the SwitchBot Cloud is an encrypted open token that grants the user developer-level permissions. The user will be able to add, delete, edit, and look up his or her user data including profile data and data associated with the devices that have been added to the user's account. Glossary The following table provides definitions to the terms to be frequently mentioned in the subsequent sections. Term Description Hub Generally referred to these devices, SwitchBot Hub Model No. SwitchBot Hub S1/SwitchBot Hub Mini Model No. W0202200/SwitchBot Hub Plus Model No. SwitchBot Hub S1 Hub Mini Short for SwitchBot Hub Mini Model No. W0202200 Hub Plus Short for SwitchBot Hub Plus Model No. SwitchBot Hub S1 Bot Short for SwitchBot Bot Model No. SwitchBot S1 Curtain Short for SwitchBot Curtain Model No.
Context number 2 (score: 0.820091069): 
"parameter" : "122:80:20" , // yellow "commandType" : "command" } Response { "statusCode" : 100 , "body" : { } , "message" : "success" } Infrared remote device example Set an Air Conditioner Request POST https://api.switch-bot.com/v1.1/devices/02-202007201626-70/commands { "command" : "setAll" , "parameter" : "26,1,3,on" , "commandType" : "command" } Response { "statusCode" : 100 , "body" : { } , "message" : "success" } Trigger a customized button Request POST https://api.switch-bot.com/v1.1/devices/02-202007201626-10/commands { "command" : "ボタン" , // the name of the customized button "parameter" : "default" , "commandType" : "customize" } Response { "statusCode" : 100 , "body" : { } , "message" : "success" } Scenes The scenes API is used to access the smart scenes created by a user and to execute manual scenes. Get scene list GET /v1.1/scenes Description Get a list of manual scenes created by the current user. Response The response is basically a JSON object, which contains the following properties, Key Name Value Type statusCode Integer message String body Object The body object contains a list of objects, which has the following properties, Key Type Description sceneId String a scene's ID sceneName String a scene's name Errors Error code/message Description {"message": "Unauthorized"} Http 401 Error. User permission is denied due to invalid token.
Context number 3 (score: 0.818817616): 
SwitchBot API v1.1 Introduction About the New Version Getting Started Authentication Open Token and Secret Key How to Sign? Python 2 example code Python 3 example code JavaScript example code C# example code Java 11+ example code PHP example code Glossary API Usage Host Domain Sending a Request Content-Type Request limit Request Header Standard HTTP Error Codes Devices Get device list Description Responses Bot Curtain Curtain 3 Hub/Hub Plus/Hub Mini/Hub 2 Meter Meter Plus Outdoor Meter Lock Lock Pro Keypad Keypad Touch Remote Motion Sensor Contact Sensor Water Leak Detector Ceiling Light Ceiling Light Pro Plug Mini (US) Plug Mini (JP) Plug Strip Light Color Bulb Robot Vacuum Cleaner S1 Robot Vacuum Cleaner S1 Plus Mini Robot Vacuum K10+ Mini Robot Vacuum K10+ Pro Floor Cleaning Robot S10 Humidifier Indoor Cam Pan/Tilt Cam Pan/Tilt Cam 2K Blind Tilt Battery Circulator Fan Virtual infrared remote devices Sample Get all devices Get device status Description Path parameters Responses Bot Curtain Curtain 3 Meter Meter Plus Outdoor Meter Lock Lock Pro Keypad Keypad Touch Motion Sensor Contact Sensor Water Leak Detector Ceiling Light Ceiling Light Pro Plug Mini (US) Plug Mini (JP) Plug Strip Light Color Bulb Robot Vacuum Cleaner S1 Robot Vacuum Cleaner S1 Plus Mini Robot Vacuum K10+ Mini Robot Vacuum K10+ Pro Floor Cleaning Robot S10 Humidifier Blind Tilt Hub 2 Battery Circulator Fan Sample SwitchBot Meter example SwitchBot Curtain example Send device control commands Description Command set for physical devices Bot Curtain Curtain 3 Lock Lock Pro Humidifier Plug Plug Mini (US) Plug Mini (JP) Color Bulb Strip Light Robot Vacuum Cleaner S1 Robot Vacuum Cleaner S1 Plus Mini Robot Vacuum K10+ Mini Robot Vacuum K10+ Pro Floor Cleaning Robot S10 Ceiling Light Ceiling Light Pro Keypad Keypad Touch Blind Tilt Battery Circulator Fan Command set for virtual infrared remote devices Path parameters Request body parameters Response Errors Sample Floor Cleaning Robot S10 example Keypad example Bot example Infrared remote device example Scenes Get scene list Description Response Errors Sample Get all scenes Execute manual scenes Description Path parameters Errors Sample Execute a scene Webhook Configure webhook Description Request Request body parameters Response Get webhook configuration Description Request Request body parameters queryUrl queryDetails Response queryUrl queryDetails Update webhook configuration Description Request Request body parameters Response Delete webhook Description Request Request body parameters Response Receive events from webhook Bot Curtain Curtain 3 Motion Sensor Contact Sensor Water Leak Detector Meter Meter Plus Outdoor Meter Lock Lock Pro Indoor Cam Pan/Tilt Cam Color Bulb LED
Context number 4 (score: 0.813093185): 
A SwitchBot Hub Plus / Hub Mini is required in order to be able to create these virtual devices within the app. The types of appliances supported include, Air Conditioner TV Light IPTV/Streamer Set Top Box DVD Fan Projector Camera Air Purifier Speaker Water Heater Vacuum Cleaner Others Responses The response is basically a JSON object, which contains the following properties, Key Name Value Type statusCode Integer message String body Object The body object contains the following properties, Key Name Value Type Description deviceList Array a list of physical devices infraredRemoteList Array a list of virtual infrared remote devices The deviceList array contains a list of objects with the following key-value attributes, Key Value Type Description deviceId String device ID deviceName String device name deviceType String device type enableCloudService Boolean determines if Cloud Service is enabled or not for the current device hubDeviceId String device's parent Hub ID curtainDevicesIds Array only available for Curtain devices. a list of Curtain device IDs such that the Curtain devices are being paired or grouped calibrate Boolean only available for Curtain/Lock devices. determines if the open position and the close position of a device have been properly calibrated or not group Boolean only available for Curtain devices. determines if a Curtain is paired with or grouped with another Curtain or not master Boolean only available for Curtain devices. determines if a Curtain is the master device or not when paired with or grouped with another Curtain openDirection String only available for Curtain devices. the opening direction of a Curtain The infraredRemoteList array contains a list of objects with the following key-value attributes, Key Value Type Description deviceId String device ID deviceName String device name remoteType String device type hubDeviceId String remote device's parent Hub ID The response may contain the following codes and messages, Status Code Body Content Message Description 100 Device list object success Returns an object that contains two device lists n/a n/a Unauthorized Http 401 Error. User permission is denied due to invalid token.
Context number 5 (score: 0.805808127): 
151 device type error 152 device not found 160 command is not supported 161 device offline 171 hub device is offline 190 Device internal error due to device states not synchronized with server. Or command format is invalid. Sample Bot example Turn a Bot on Request POST https://api.switch-bot.com/v1.0/devices/210/commands { "command" : "turnOn" , "parameter" : "default" , "commandType" : "command" } Response { "statusCode" : 100 , "body" : { } , "message" : "success" } Set the color value of a Color Bulb Request POST https://api.switch-bot.com/v1.0/devices/84F70353A411/commands { "command" : "setColor" , "parameter" : "122:80:20" , // yellow "commandType" : "command" } Response { "statusCode" : 100 , "body" : { } , "message" : "success" } Infrared remote device example Set an Air Conditioner Request POST https://api.switch-bot.com/v1.0/devices/02-202007201626-70/commands { "command" : "setAll" , "parameter" : "26,1,3,on" , "commandType" : "command" } Response { "statusCode" : 100 , "body" : { } , "message" : "success" } Trigger a customized button Request POST https://api.switch-bot.com/v1.0/devices/02-202007201626-10/commands { "command" : "ボタン" , // the name of the customized button "parameter" : "default" , "commandType" : "customize" } Response { "statusCode" : 100 , "body" : { } , "message" : "success" } Scenes The scenes API is used to access the smart scenes created by a user and to execute manual scenes. Get scene list GET /v1.0/scenes Description Get a list of manual scenes created by the current user. Response The response is basically a JSON object, which contains the following properties, Key Name Value Type statusCode Integer message String body Object The body object contains a list of objects, which has the following properties, Key Type Description sceneId String a scene's ID sceneName String a scene's name Errors Error code/message Description {"message": "Unauthorized"} Http 401 Error.
Context number 6 (score: 0.804870903): 
429 Too Many Requests The client has exceeded the number of requests allowed for a given time window. 500 Internal Server Error An unexpected error on the SmartThings servers has occurred. These errors should be rare. Devices The devices API is used to access the properties and states of SwitchBot devices and to send control commands to those devices. Get device list GET /v1.1/devices Description Get a list of devices, which include physical devices and virtual infrared remote devices that have been added to the current user's account. Note: For devices that communicate via BLE, please enable Cloud Services on SwitchBot app first. Physical devices refer to the following SwitchBot products, Hub Hub Plus Hub Mini Bot Curtain Plug Meter Motion Sensor Contact Sensor Color Bulb Humidifier Smart Fan Strip Light Plug Mini (US) Plug Mini (JP) Lock Meter Plus (JP) Meter Plus (US) Robot Vacuum Cleaner S1 Robot Vacuum Cleaner S1 Plus Keypad Keypad Touch Ceiling Light Ceiling Light Pro Blind Tilt Hub 2 Outdoor Meter Battery Circulator Fan Curtain 3 Lock Pro Floor Cleaning Robot S10 Water Leak Detector new Mini Robot Vacuum K10+ new Mini Robot Vacuum K10+ Pro Virtual infrared remote devices refer to virtual devices that are used to simulate infrared signals of a home appliance remote control. A SwitchBot Hub Plus, Hub Mini, Hub 2, or Ceiling Light is required in order to be able to create these virtual devices within the app. The types of appliances supported include, Air Conditioner TV Light Streamer Set Top Box DVD Player Fan Projector Camera Air Purifier Speaker Water Heater Robot Vacuum Cleaner Others Responses The response is basically a JSON object, which contains the following properties, Key Name Value Type statusCode Integer message String body Object The body object contains the following properties, Key Name Value Type Description deviceList Array a list of physical devices infraredRemoteList Array a list of virtual infrared remote devices The response may contain the following codes and messages, Status Code Body Content Message Description 100 Device list object success Returns an object that contains two device lists n/a n/a Unauthorized Http 401 Error. User permission is denied due to invalid token. 190 n/a System error Device internal error due to device states not synchronized with server The deviceList array contains a list of objects with the following key-value attributes, Bot Key Value Type Description deviceId String device ID deviceName String device name deviceType String device type.
Context number 7 (score: 0.803188324): 
turn on: on ; turn off: off verticalOscillation String set vertical oscillation. turn on: on ; turn off: off chargingStatus String battery charge status. charging or uncharged fanSpeed Integer fan speed. 1~100 Sample SwitchBot Meter example Request the status of a SwitchBot Thermometer and Hygrometer Request GET https://api.switch-bot.com/v1.1/devices/C271111EC0AB/status Response { "statusCode" : 100 , "body" : { "deviceId" : "C271111EC0AB" , "deviceType" : "Meter" , "hubDeviceId" : "FA7310762361" , "humidity" : 52 , "temperature" : 26.1 } , "message" : "success" } SwitchBot Curtain example Request the status of a SwitchBot Curtain Request GET https://api.switch-bot.com/v1.1/devices/E2F6032048AB/status Response { "statusCode" : 100 , "body" : { "deviceId" : "E2F6032048AB" , "deviceType" : "Curtain" , "hubDeviceId" : "FA7310762361" , "calibrate" : true , "group" : false , "moving" : false , "slidePosition" : 0 } , "message" : "success" } Send device control commands POST /v1.1/devices/{deviceId}/commands Description Send control commands to physical devices and virtual infrared remote devices. Command set for physical devices Bot deviceType commandType Command command parameter Description Bot command turnOff default set to OFF state Bot command turnOn default set to ON state Bot command press default trigger press Curtain deviceType commandType Command command parameter Description Curtain command setPosition index0,mode0,position0 e.g. 0,ff,80 mode: 0 (Performance Mode), 1 (Silent Mode), ff (default mode) position: 0~100 (0 means open, 100 means closed) Curtain command turnOff default equivalent to set position to 100 Curtain command turnOn default equivalent to set position to 0 Curtain command pause default set to PAUSE state Curtain 3 deviceType commandType Command command parameter Description Curtain 3 command setPosition index0,mode0,position0 e.g. 0,ff,80 mode: 0 (Performance Mode), 1 (Silent Mode),
Context number 8 (score: 0.800737858): 
webhook configuration Description Request Request body parameters Response Delete webhook Description Request Request body parameters Response Receive events from webhook Bot Curtain Curtain 3 Motion Sensor Contact Sensor Water Leak Detector Meter Meter Plus Outdoor Meter Lock Lock Pro Indoor Cam Pan/Tilt Cam Color Bulb LED Strip Light Plug Mini (US) Plug Mini (JP) Robot Vacuum Cleaner S1 Robot Vacuum Cleaner S1 Plus Mini Robot Vacuum K10+ Mini Robot Vacuum K10+ Pro Floor Cleaning Robot S10 Ceiling Light Ceiling Light Pro Keypad Create a passcode Delete a passcode Keypad Touch Create a passcode Delete a passcode Hub 2 Battery Circulator Fan Introduction This document describes a collection of SwitchBot API methods, examples, and best practices for, but not limited to, IoT hobbyists, developers, and gurus to make their own smart home programs or applications. About the New Version We will stop adding support for new products on v1.0 as we release v1.1 . Hence, we strongly recommend all SwitchBot users to migrate to the new API version because we have improved the authentication method. This will make the communication between your server and the SwitchBot server more secure. Getting Started Please follow these steps, Download the SwitchBot app on App Store or Google Play Store Register a SwitchBot account and log in into your account Generate an Open Token within the app For app version ≥ V9.0, a) Go to Profile > Preferences > About b) Tap App Version 10 times. Developer Options will show up c) Tap Developer Options d) Tap Get Token For app version < V9.0, a) Go to Profile > Preferences b) Tap App Version 10 times. Developer Options will show up c) Tap Developer Options d) Tap Get Token Roll up your sleeves and get your hands dirty with SwitchBot OpenAPI! Authentication Open Token and Secret Key Note: You must update the app to the latest version, V6.14 or later, in order to get the secret key. In SwitchBot API v1.1 , the authentication method has been improved. In order to gain access to private data through the API, you must generate a unique signature using a token and a secret key. When you make a request, the Authorization token and signature will be validated simultaneously. You as a developer will then be able to add, delete, edit, and look up your data including profile data and data associated with the devices that have been added to your SwitchBot account.
Context number 9 (score: 0.79647094): 
User permission is denied due to invalid token. 190 n/a System error Device internal error due to device states not synchronized with server Sample Get all devices Request GET https://api.switch-bot.com/v1.0/devices Response { "statusCode" : 100 , "body" : { "deviceList" : [ { "deviceId" : "500291B269BE" , "deviceName" : "Living Room Humidifier" , "deviceType" : "Humidifier" , "enableCloudService" : true , "hubDeviceId" : "000000000000" } ] , "infraredRemoteList" : [ { "deviceId" : "02-202008110034-13" , "deviceName" : "Living Room TV" , "remoteType" : "TV" , "hubDeviceId" : "FA7310762361" } ] } , "message" : "success" } Get device status GET /v1.0/devices/{deviceId}/status Description Get the status of a physical device that has been added to the current user's account. Physical devices refer to the following SwitchBot products, Bot Plug Curtain Meter Motion Sensor Contact Sensor Color Bulb Humidifier Smart Fan Strip Light Plug Mini (US) Plug Mini (JP) Lock Meter Plus (JP) Meter Plus (US) new Robot Vacuum Cleaner S1 new Robot Vacuum Cleaner S1 Plus Path parameters Name Type Required Description deviceId String Yes device ID Responses The response is basically a JSON object, which contains the following properties, Key Name Value Type statusCode Integer message String body Object body object contains the following properties,
Context number 10 (score: 0.794621706): 
e.g. Cleaning, Paused onlineStatus String Robot Vacuum Cleaner S1/ S1 Plus determines if the device is online or offline battery Integer Robot Vacuum Cleaner S1/ S1 Plus the battery level The reponses may contain the following codes and message, Status Code Body Content Message Description 100 Device list object success Returns an object that contains two device lists n/a n/a Unauthorized Http 401 Error. User permission is denied due to invalid token. 190 n/a System error Device internal error due to device states not synchronized with server Sample SwitchBot Meter example Request the status of a SwitchBot Thermometer and Hygrometer Request GET https://api.switch-bot.com/v1.0/devices/C271111EC0AB/status Response { "statusCode" : 100 , "body" : { "deviceId" : "C271111EC0AB" , "deviceType" : "Meter" , "hubDeviceId" : "FA7310762361" , "humidity" : 52 , "temperature" : 26.1 } , "message" : "success" } SwitchBot Curtain example Request the status of a SwitchBot Curtain Request GET https://api.switch-bot.com/v1.0/devices/E2F6032048AB/status Response { "statusCode" : 100 , "body" : { "deviceId" : "E2F6032048AB" , "deviceType" : "Curtain" , "hubDeviceId" : "FA7310762361" , "calibrate" : true , "group" : false , "moving" : false , "slidePosition" : 0 } , "message" : "success" } Send device control commands POST /v1.0/devices/{deviceId}/commands Description Send control commands to physical devices and virtual infrared remote devices. Command set for physical devices The table below describes all the available commands for physical devices, deviceType commandType Command command parameter Description Bot command turnOff default set to OFF state Bot command turnOn default set to ON state Bot command press default trigger press Plug command turnOn default set to ON state Plug command turnOff default set to OFF state Curtain command setPosition index0,mode0,position0 e.g.
Context number 11 (score: 0.784888387): 
You will see Third-party Services instead. Please read this article for more information, https://support.switch-bot.com/hc/en-us/articles/7257579858455 A SwitchBot app feature, which appears in the app <V9.0 that Enables SwitchBot products to be discovered and communicated with third-party services such as Home Assistant, Alexa, Google Home, IFTTT, SmartThings, and so forth Allows users to create customized smart scenes and widgets. For BLE-based devices such as Bot and Curtain You MUST first add a SwitchBot Hub such as Hub 2, Hub Mini with Matter Enabled, or Hub Mini Then enable Cloud Services on the Settings page in order to make use of the web API! API Usage Host Domain https://api.switch-bot.com Sending a Request The following request types are supported, GET PUT POST DELETE Content-Type For POST requests, use application/json; charset=utf8 as the Content-Type Request limit The amount of API calls per day is limited to 10000 times. Going over that limit will return "Unauthorized." Request Header The following parameters need to be included into the header, Parameter Type Location Required Description Authorization String header Yes Open Token acquired sign String header Yes A signature generated from the token and secret key using a specific algorithm. t Long header Yes A 13 digit timestamp (standard time). nonce Long header Yes A random UUID generated by developers themselves to blend into the string to sign. Standard HTTP Error Codes The following table lists the most common HTTP error response, Code Name Description 400 Bad Request The client has issued an invalid request. This is commonly used to specify validation errors in a request payload. 401 Unauthorized Authorization for the API is required, but the request has not been authenticated. 403 Forbidden The request has been authenticated but does not have appropriate permissions, or a requested resource is not found. 404 Not Found Specifies the requested path does not exist. 406 Not Acceptable The client has requested a MIME type via the Accept header for a value not supported by the server. 415 Unsupported Media Type The client has defined a contentType header that is not supported by the server. 422 Unprocessable Entity The client has made a valid request, but the server cannot process it. This is often used for APIs for which certain limits have been exceeded. 429 Too Many Requests The client has exceeded the number of requests allowed for a given time window. 500 Internal Server Error An unexpected error on the SmartThings servers has occurred.
Context number 12 (score: 0.783813059): 
15 set the TV channel to switch to command volumeAdd default volume up command volumeSub default volume down command channelAdd default next channel command channelSub default previous channel DVD, Speaker command setMute default mute/unmute command FastForward default fast forward command Rewind default rewind command Next default next track command Previous default last track command Pause default pause command Play default play/resume command Stop default stop Speaker command volumeAdd default volume up command volumeSub default volume down Fan command swing default swing command timer default set timer command lowSpeed default set fan speed to low command middleSpeed default set fan speed to medium command highSpeed default set fan speed to high Light command brightnessUp default brightness up command brightnessDown default brightness down Note: Most of the devices support turnOn or turnOff , which are case-sensitive. For infrared remote devices, when you have created customized buttons, you must set commandType to customize , otherwise the command will not work. command needs to be set to the name of the customized button. Path parameters Name Type Required Description deviceId String Yes device ID Request body parameters Name Type Required Description command String Yes the name of the command parameter String No some commands require parameters, such as SetChannel commandType String No for customized buttons, this needs to be set to customzie Response The response is basically a JSON object, which contains the following properties, Key Name Value Type statusCode Integer message String body Object Errors Error code/message Description {"message": "Unauthorized"} Http 401 Error. User permission is denied due to invalid token. 151 device type error 152 device not found 160 command is not supported 161 device offline 171 hub device is offline 190 Device internal error due to device states not synchronized with server. Or command format is invalid. Sample Floor Cleaning Robot S10 example Clean with vacuum mode Request POST https://api.switch-bot.com/v1.1/devices/F7538E1ABC23/commands { "commandType" : "command" , "command" : "startClean" , // start cleaning "parameter" : { "action" : "sweep" , // clean with vacuum mode "param" : { "fanLevel" : 1 , // vacuum level set to 1 "waterLevel" : 1 , // mop moisture level set to 1 "times" : 1 // number of cyclyes to clean set to 1 } } } Response { "statusCode" : 100 ,
Context number 13 (score: 0.781867206): 
Battery Circulator Fan enableCloudService Boolean determines if Cloud Service is enabled or not for the current device hubDeviceId String device's parent Hub ID Virtual infrared remote devices The infraredRemoteList array contains a list of objects with the following key-value attributes, Key Value Type Description deviceId String device ID deviceName String device name remoteType String device type hubDeviceId String remote device's parent Hub ID Sample Get all devices Request GET https://api.switch-bot.com/v1.1/devices Response { "statusCode" : 100 , "body" : { "deviceList" : [ { "deviceId" : "500291B269BE" , "deviceName" : "Living Room Humidifier" , "deviceType" : "Humidifier" , "enableCloudService" : true , "hubDeviceId" : "000000000000" } ] , "infraredRemoteList" : [ { "deviceId" : "02-202008110034-13" , "deviceName" : "Living Room TV" , "remoteType" : "TV" , "hubDeviceId" : "FA7310762361" } ] } , "message" : "success" } Get device status GET /v1.1/devices/{deviceId}/status Description Get the status of a physical device that has been added to the current user's account. Physical devices refer to the following SwitchBot products, Bot Plug Curtain Meter Motion Sensor Contact Sensor Color Bulb Humidifier Smart Fan Strip Light Plug Mini (US) Plug Mini (JP) Lock Meter Plus (JP) Meter Plus (US) Robot Vacuum Cleaner S1 Robot Vacuum Cleaner S1 Plus Keypad (MUST enable Cloud Service first) Keypad Touch (MUST enable Cloud Service first) Ceiling Light Ceiling Light Pro Hub 2 Outdoor Meter Battery Circulator Fan Lock Pro Floor Cleaning Robot S10 Water Leak Detector new Mini Robot Vacuum K10+ new Mini Robot Vacuum K10+ Pro Path parameters Name Type Required Description deviceId String Yes device ID Responses The response is basically a JSON object, which contains the following properties, Key Name Value Type statusCode Integer message String body Object The reponses may contain the following codes and message, Status Code Body Content Message Description 100 Device list object success Returns an object that contains two device lists n/a n/a Unauthorized Http 401 Error. User permission is denied due to invalid token.
Context number 14 (score: 0.774321675): 
User permission is denied due to invalid token. 190 Device internal error due to device states not synchronized with server Sample Execute a scene Request POST https://api.switch-bot.com/v1.0/scenes/T02-202009221414-48924101/execute Response { "statusCode" : 100 , "body" : { } , "message" : "success" } Webhook Configure webhook Description Configure the url that all the webhook events will be sent to Request POST https://api.switch-bot.com/v1.0/webhook/setupWebhook Request body parameters Key Name Value Type Description action String the type of actions url String the url where all the events are sent to deviceList String the list of device ids, currently only supports "ALL" Head { "Content-type" : "application/json" , "Authorization" : your_token // enter your API token } Body { "action" : "setupWebhook" , "url" : url1 , // enter your url "deviceList" : "ALL" } Response Sample { "statusCode" : 100 , "body" : { } , "message" : "" } Get webhook configuration Description Get the current configuration info of the webhook Request POST https://api.switch-bot.com/v1.0/webhook/queryWebhook Request body parameters Key Name Value Type Description action String the type of actions, currently supports "queryUrl", "queryDetails" url String the url where all the events are sent to.
Context number 15 (score: 0.773841619): 
User permission is denied due to invalid token. 190 Device internal error due to device states not synchronized with server Sample Execute a scene Request POST https://api.switch-bot.com/v1.1/scenes/T02-202009221414-48924101/execute Response { "statusCode" : 100 , "body" : { } , "message" : "success" } Webhook Configure webhook Description Configure the url that all the webhook events will be sent to Request POST https://api.switch-bot.com/v1.1/webhook/setupWebhook Request body parameters Key Name Value Type Description action String the type of actions url String the url where all the events are sent to deviceList String the list of device ids, currently only supports "ALL" Head { "Content-type" : "application/json" , "Authorization" : your_token // enter your API token } Body { "action" : "setupWebhook" , "url" : url1 , // enter your url "deviceList" : "ALL" } Response Sample { "statusCode" : 100 , "body" : { } , "message" : "" } Get webhook configuration Description Get the current configuration info of the webhook Request POST https://api.switch-bot.com/v1.1/webhook/queryWebhook Request body parameters Key Name Value Type Description action String the type of actions, currently supports "queryUrl", "queryDetails" url String the url where all the events are sent to.
Context number 16 (score: 0.771100402): 
on,1,1,60 power: off/on, fanMode: 1/2, fanSpeed: 1/2/3/4, shakeRange: 0~120 fanMode: 1 (Standard), 2 (Natural) Color Bulb command turnOn default set to ON state Color Bulb command turnOff default set to OFF state Color Bulb command toggle default toggle state Color Bulb command setBrightness {1-100} set brightness Color Bulb command setColor "{0-255}:{0-255}:{0-255}" set RGB color value Color Bulb command setColorTemperature {2700-6500} set color temperature Strip Light command turnOn default set to ON state Strip Light command turnOff default set to OFF state Strip Light command toggle default toggle state Strip Light command setBrightness {1-100} set brightness Strip Light command setColor "{0-255}:{0-255}:{0-255}" set RGB color value Plug Mini (US/JP) command turnOn default set to ON state Plug Mini (US/JP) command turnOff default set to OFF state Plug Mini (US/JP) command toggle default toggle state Robot Vacuum Cleaner S1 command start default start vacuuming Robot Vacuum Cleaner S1 command stop default stop vacuuming Robot Vacuum Cleaner S1 command dock default return to charging dock Robot Vacuum Cleaner S1 command PowLevel {0-3} set suction power level: 0 (Quiet), 1 (Standard), 2 (Strong), 3 (MAX) Robot Vacuum Cleaner S1 Plus command start default start vacuuming Robot Vacuum Cleaner S1 Plus command stop default stop vacuuming Robot Vacuum Cleaner S1 Plus command dock default return to charging dock Robot Vacuum Cleaner S1 Plus command PowLevel {0-3} set suction power level: 0 (Quiet), 1 (Standard), 2 (Strong), 3 (MAX) Command set for virtual infrared remote devices The table below describes all the available commands for virtual infrared remote devices, deviceType commandType Command command parameter Description All home appliance types except Others "" turnOn default every home appliance can be turned on by default All home appliance types except Others command turnOff default every home appliance can be turned off by default Others customize {user-defined button name} default all user-defined buttons must be configured with commandType=customize Air Conditioner command setAll {temperature},{mode},{fan speed},{power state} e.g.
Context number 17 (score: 0.77030158): 
"eventVersion" : "1" , "context" : { "deviceType" : "WoCurtain" , "deviceMac" : DEVICE_MAC_ADDR , "calibrate" : false , "group" : false , "slidePosition" : 50 , //0~100 "battery" : 100 , "timeOfSample" : 123456789 } } Curtain 3 Key Name Value Type Description eventType String the type of events eventVersion String the current event version context Object the detail info of the event deviceType String the type of the device deviceMac String the MAC address of the device calibrate Boolean determines if the open position and the close position of a device have been properly calibrated or not group Boolean determines if a Curtain is paired with or grouped with another Curtain or not slidePosition Integer the percentage of the distance between the calibrated open position and closed position that Curtain has traversed battery Integer the battery level of a Curtain timeOfSample Long the time stamp when the event is sent { "eventType" : "changeReport" , "eventVersion" : "1" , "context" : { "deviceType" : "WoCurtain3" , "deviceMac" : DEVICE_MAC_ADDR , "calibrate" : false , "group" : false , "slidePosition" : 50 , //0~100 "battery" : 100 , "timeOfSample" : 123456789 } } Motion Sensor Key Name Value Type Description eventType String the type of events eventVersion String the current event version context Object the detail info of the event deviceType String the type of the device deviceMac String the MAC address of the device detectionState String the motion state of the device, "DETECTED" stands for motion is detected; "NOT_DETECTED" stands for motion has not been detected for some time timeOfSample Long the time stamp when the event is sent { "eventType" : "changeReport" , "eventVersion" : "1" , "context" : { "deviceType" : "WoPresence" , "deviceMac" : DEVICE_MAC_ADDR , "detectionState" : "NOT_DETECTED" , "timeOfSample" : 123456789 } } Contact Sensor Key Name Value Type Description eventType String the type of events eventVersion String the current event version context Object the detail info of the event deviceType String the type of the device deviceMac String the MAC address of the device detectionState String the motion state of the device,
Context number 18 (score: 0.769008875): 
26,1,3,on the unit of temperature is in celsius; modes include 1 (auto), 2 (cool), 3 (dry), 4 (fan), 5 (heat); fan speed includes 1 (auto), 2 (low), 3 (medium), 4 (high); power state includes on and off TV, IPTV/Streamer, Set Top Box command SetChannel {channel number}, e.g. 15 set the TV channel to switch to command volumeAdd default volume up command volumeSub default volume down command channelAdd default next channel command channelSub default previous channel DVD, Speaker command setMute default mute/unmute command FastForward default fast forward command Rewind default rewind command Next default next track command Previous default last track command Pause default pause command Play default play/resume command Stop default stop Speaker command volumeAdd default volume up command volumeSub default volume down Fan command swing default swing command timer default set timer command lowSpeed default set fan speed to low command middleSpeed default set fan speed to medium command highSpeed default set fan speed to high Light command brightnessUp default brightness up command brightnessDown default brightness down Note: Most of the devices support turnOn or turnOff , which are case-sensitive. For infrared remote devices, when you have created customized buttons, you must set commandType to customize , otherwise the command will not work. command needs to be set to the name of the customized button. Path parameters Name Type Required Description deviceId String Yes device ID Request body parameters Name Type Required Description command String Yes the name of the command parameter String No some commands require parameters, such as SetChannel commandType String No for customized buttons, this needs to be set to customzie Response The response is basically a JSON object, which contains the following properties, Key Name Value Type statusCode Integer message String body Object Errors Error code/message Description {"message": "Unauthorized"} Http 401 Error. User permission is denied due to invalid token. 151 device type error 152 device not found 160 command is not supported 161 device offline 171 hub device is offline 190 Device internal error due to device states not synchronized with server. Or command format is invalid.
Context number 19 (score: 0.768947124): 
Going over that limit will return "Unauthorized." Request Header The following parameters need to be included into the header, Parameter Type Location Required Description Authorization String header Yes Open Token acquired Standard HTTP Error Codes The following table lists the most common HTTP error response, Code Name Description 400 Bad Request The client has issued an invalid request. This is commonly used to specify validation errors in a request payload. 401 Unauthorized Authorization for the API is required, but the request has not been authenticated. 403 Forbidden The request has been authenticated but does not have appropriate permissions, or a requested resource is not found. 404 Not Found Specifies the requested path does not exist. 406 Not Acceptable The client has requested a MIME type via the Accept header for a value not supported by the server. 415 Unsupported Media Type The client has defined a contentType header that is not supported by the server. 422 Unprocessable Entity The client has made a valid request, but the server cannot process it. This is often used for APIs for which certain limits have been exceeded. 429 Too Many Requests The client has exceeded the number of requests allowed for a given time window. 500 Internal Server Error An unexpected error on the SmartThings servers has occurred. These errors should be rare. Devices The devices API is used to access the properties and states of SwitchBot devices and to send control commands to those devices. Get device list GET /v1.0/devices Description Get a list of devices, which include physical devices and virtual infrared remote devices that have been added to the current user's account. Physical devices refer to the following SwitchBot products, Hub Hub Plus Hub Mini Bot (MUST enable Cloud Service first) Curtain (MUST enable Cloud Service first) Plug Meter (MUST enable Cloud Service first) Motion Sensor (MUST enable Cloud Service first) Contact Sensor (MUST enable Cloud Service first) Color Bulb Humidifier Smart Fan Strip Light Plug Mini (US) Plug Mini (JP) Lock Meter Plus (JP) (MUST enable Cloud Service first) Meter Plus (US) (MUST enable Cloud Service first) new Robot Vacuum Cleaner S1 new Robot Vacuum Cleaner S1 Plus Virtual infrared remote devices refer to virtual devices that are used to simulate infrared signals of a home appliance remote control. A SwitchBot Hub Plus / Hub Mini is required in order to be able to create these virtual devices within the app.
Context number 20 (score: 0.764522135): 
uuid4 () t = int ( round ( time . time () * 1000 )) string_to_sign = '{}{}{}' . format ( token , t , nonce ) string_to_sign = bytes ( string_to_sign , 'utf-8' ) secret = bytes ( secret , 'utf-8' ) sign = base64 . b64encode ( hmac . new ( secret , msg = string_to_sign , digestmod = hashlib . sha256 ). digest ()) print ( 'Authorization: {}' . format ( token )) print ( 't: {}' . format ( t )) print ( 'sign: {}' . format ( str ( sign , 'utf-8' ))) print ( 'nonce: {}' . format ( nonce )) #Build api header JSON apiHeader [ 'Authorization' ] = token apiHeader [ 'Content-Type' ] = 'application/json' apiHeader [ 'charset' ] = 'utf8' apiHeader [ 't' ] = str ( t ) apiHeader [ 'sign' ] = str ( sign , 'utf-8' ) apiHeader [ 'nonce' ] = str ( nonce ) JavaScript example code const crypto = require ( 'crypto' ) ; const https = require ( 'https' ) ; const token = "yourToken" ; const secret = "yourSecret" ; const t = Date . now ( ) ; const nonce = "requestID" ; const data = token + t + nonce ; const signTerm = crypto . createHmac ( 'sha256' , secret ) . update ( Buffer . from ( data , 'utf-8' ) ) . digest ( ) ; const sign = signTerm . toString ( "base64" ) ; console . log ( sign ) ; const body = JSON . stringify ( { "command" : "turnOn" , "parameter" : "default" , "commandType" : "command" } ) ; const deviceId = "MAC" ; const options = { hostname : 'api.switch-bot.com' , port : 443 , path : `/v1.1/devices/ ${ deviceId } /commands` , method : 'POST' , headers : { "Authorization" : token , "sign" : sign , "nonce" : nonce , "t" : t , 'Content-Type' : 'application/json' , 'Content-Length' : body .