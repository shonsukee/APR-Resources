---------------User Query---------------
function authorize() {
	var oAuthConfig = UrlFetchApp.addOAuthService("fitbit");
	oAuthConfig.setAccessTokenUrl("https://api.fitbit.com/oauth/access_token");
	oAuthConfig.setRequestTokenUrl("https://api.fitbit.com/oauth/request_token");
	oAuthConfig.setAuthorizationUrl("https://api.fitbit.com/oauth/authorize");
	oAuthConfig.setConsumerKey(getConsumerKey());
	oAuthConfig.setConsumerSecret(getConsumerSecret());

	var options = {
	  "oAuthServiceName" : "fitbit",
	  "oAuthUseToken" : "always"
	};

	// get The profile but don't do anything with it -- just to force
	// authentication
	var result = UrlFetchApp.fetch(
		"https://api.fitbit.com/1/user/-/profile.json", options);
	var o = Utilities.jsonParse(result.getContentText());

	return o.user;
	// options are dateOfBirth, nickname, state, city, fullName, etc. see
	// http://wiki.fitbit.com/display/API/API-Get-User-Info
}

---------------Response---------------
function authorize() {
  const tokenUrl = "https://api.fitbit.com/oauth2/token";
  const authorizationUrl = "https://www.fitbit.com/oauth2/authorize";

  const options = {
    method: "post",
    headers: {
      "Authorization": `Basic ${Utilities.base64Encode(`${getConsumerKey()}:${getConsumerSecret()}`)}`,
      "Content-Type": "application/x-www-form-urlencoded"
    },
    payload: {
      client_id: getConsumerKey(),
      grant_type: "authorization_code",
      redirect_uri: "YOUR_REDIRECT_URI", // Replace with your redirect URI
      code: "YOUR_AUTHORIZATION_CODE" // Replace with your authorization code
    }
  };

  const response = UrlFetchApp.fetch(tokenUrl, options);
  const result = JSON.parse(response.getContentText());

  if (result.access_token) {
    const profileResponse = UrlFetchApp.fetch(
      "https://api.fitbit.com/1/user/-/profile.json",
      {
        method: "get",
        headers: {
          "Authorization": `Bearer ${result.access_token}`
        }
      }
    );
    const profile = JSON.parse(profileResponse.getContentText());
    return profile.user;
  } else {
    throw new Error("Authorization failed");
  }
}
