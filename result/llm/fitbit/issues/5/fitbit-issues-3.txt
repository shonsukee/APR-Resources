---------------User Query---------------
function getFitbitService() {
	return OAuth1.createService(identifier)
	// Set the endpoint URLs.
	.setAccessTokenUrl("https://api.fitbit.com/oauth/access_token")
	.setRequestTokenUrl("https://api.fitbit.com/oauth/request_token")
	.setAuthorizationUrl("https://api.fitbit.com/oauth/authorize")

	// Set the consumer key and secret.
	.setConsumerKey(getConsumerKey())
	.setConsumerSecret(getConsumerSecret())

	// Set the project key of the script using this library.
	.setProjectKey(projectKey)


	// Set the name of the callback function in the script referenced
	// above that should be invoked to complete the OAuth flow.
	.setCallbackFunction('authCallback')

	// Set the property store where authorized tokens should be persisted.
	.setPropertyStore(PropertiesService.getUserProperties());
}

---------------Response---------------
function getFitbitService() {
	return OAuth2.createService(identifier)
		// Set the endpoint URLs.
		.setAuthorizationBaseUrl("https://www.fitbit.com/oauth2/authorize")
		.setTokenUrl("https://api.fitbit.com/oauth2/token")

		// Set the client ID and secret.
		.setClientId(getConsumerKey())
		.setClientSecret(getConsumerSecret())

		// Set the project key of the script using this library.
		.setProjectKey(projectKey)

		// Set the callback URL for the authorization flow.
		.setCallbackFunction('authCallback')

		// Set the property store where authorized tokens should be persisted.
		.setPropertyStore(PropertiesService.getUserProperties())

		// Set the scope for the Fitbit API access.
		.setScope('activity heartrate sleep nutrition profile')
		
		// Ensure the service uses the "refresh token" mechanism.
		.setTokenHeaders({
			Authorization: 'Basic ' + Utilities.base64Encode(getConsumerKey() + ':' + getConsumerSecret())
		});
}
