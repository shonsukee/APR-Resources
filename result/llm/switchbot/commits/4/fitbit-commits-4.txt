---------------User Query---------------
class SwitchBot:
    BASE_URL        = 'https://api.switch-bot.com'
    BASE_PATH       = os.path.dirname(os.path.abspath(__file__))
    TOKEN_FILE      = os.path.join(BASE_PATH, 'token.txt')

    def __init__(self):
        with open(SwitchBot.TOKEN_FILE, 'r') as f:
            self.token = f.read().strip()

    def get_headers(self):
        return { 'Authorization': self.token }

    def get_url(self, *pathes):
        url = SwitchBot.BASE_URL + '/v1.0'
        for path in pathes:
            url += '/' + path
        return url

    def do_get(self, url, data, headers={}):
        req = Request(url, data, headers)
        req.add_header('Authorization', self.token)
        res = urlopen(req)
        return res.read().decode()

---------------Response---------------
import os
import time
import hmac
import hashlib
import base64
import json
from urllib.request import Request, urlopen

class SwitchBot:
    BASE_URL = 'https://api.switch-bot.com/v1.1'
    BASE_PATH = os.path.dirname(os.path.abspath(__file__))
    TOKEN_FILE = os.path.join(BASE_PATH, 'token.txt')
    SECRET_FILE = os.path.join(BASE_PATH, 'secret.txt')

    def __init__(self):
        with open(SwitchBot.TOKEN_FILE, 'r') as f:
            self.token = f.read().strip()
        with open(SwitchBot.SECRET_FILE, 'r') as f:
            self.secret = f.read().strip()

    def get_headers(self):
        nonce = os.urandom(16).hex()
        t = str(int(time.time() * 1000))
        string_to_sign = self.token + t + nonce
        sign = base64.b64encode(hmac.new(self.secret.encode(), string_to_sign.encode(), hashlib.sha256).digest()).decode()
        return {
            'Authorization': self.token,
            'sign': sign,
            'nonce': nonce,
            't': t,
            'Content-Type': 'application/json; charset=utf8'
        }

    def get_url(self, *paths):
        return '/'.join([SwitchBot.BASE_URL] + list(paths))

    def do_get(self, url):
        req = Request(url, headers=self.get_headers())
        with urlopen(req) as res:
            return json.loads(res.read().decode())
