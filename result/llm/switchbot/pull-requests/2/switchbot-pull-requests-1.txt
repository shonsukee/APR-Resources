---------------User Query---------------
switchbot_host = 'https://api.switch-bot.com/v1.0'


class SwitchBotClient:
    def __init__(self, token: str):
        self.session = requests.Session()
        self.session.headers['Authorization'] = token

    def request(self, method: str, path: str, **kwargs) -> Any:
        url = f'{switchbot_host}/{path}'
        response = self.session.request(method, url, **kwargs)
        if response.status_code != 200:
            raise RuntimeError(
                f'SwitchBot API server returns status {response.status_code}')
        response_in_json = humps.decamelize(response.json())
        if response_in_json['status_code'] != 100:
            raise RuntimeError(
                f'An error occurred: {response_in_json["message"]}')
        return response_in_json

---------------Response---------------
switchbot_host = 'https://api.switch-bot.com/v1.1'

class SwitchBotClient:
    def __init__(self, token: str, secret: str):
        self.session = requests.Session()
        self.token = token
        self.secret = secret

    def _generate_headers(self) -> dict:
        t = str(int(time.time() * 1000))
        nonce = ''.join(random.choices(string.ascii_letters + string.digits, k=16))
        string_to_sign = f'{self.token}{t}{nonce}'
        sign = base64.b64encode(hmac.new(self.secret.encode(), string_to_sign.encode(), hashlib.sha256).digest()).decode()
        return {
            'Authorization': self.token,
            't': t,
            'sign': sign,
            'nonce': nonce,
            'Content-Type': 'application/json; charset=utf8'
        }

    def request(self, method: str, path: str, **kwargs) -> Any:
        url = f'{switchbot_host}/{path}'
        headers = self._generate_headers()
        response = self.session.request(method, url, headers=headers, **kwargs)
        if response.status_code != 200:
            raise RuntimeError(f'SwitchBot API server returns status {response.status_code}')
        response_in_json = humps.decamelize(response.json())
        if response_in_json['status_code'] != 100:
            raise RuntimeError(f'An error occurred: {response_in_json["message"]}')
        return response_in_json
